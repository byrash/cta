{"ast":null,"code":"import { NodeType, NodeProp, NodeSet, Tree, Parser, parseMixed } from '@lezer/common';\nimport { styleTags, tags, Tag } from '@lezer/highlight';\nclass CompositeBlock {\n  static create(type, value, from, parentHash, end) {\n    let hash = parentHash + (parentHash << 8) + type + (value << 4) | 0;\n    return new CompositeBlock(type, value, from, hash, end, [], []);\n  }\n  constructor(type,\n  // Used for indentation in list items, markup character in lists\n  value, from, hash, end, children, positions) {\n    this.type = type;\n    this.value = value;\n    this.from = from;\n    this.hash = hash;\n    this.end = end;\n    this.children = children;\n    this.positions = positions;\n    this.hashProp = [[NodeProp.contextHash, hash]];\n  }\n  addChild(child, pos) {\n    if (child.prop(NodeProp.contextHash) != this.hash) child = new Tree(child.type, child.children, child.positions, child.length, this.hashProp);\n    this.children.push(child);\n    this.positions.push(pos);\n  }\n  toTree(nodeSet, end = this.end) {\n    let last = this.children.length - 1;\n    if (last >= 0) end = Math.max(end, this.positions[last] + this.children[last].length + this.from);\n    return new Tree(nodeSet.types[this.type], this.children, this.positions, end - this.from).balance({\n      makeTree: (children, positions, length) => new Tree(NodeType.none, children, positions, length, this.hashProp)\n    });\n  }\n}\nvar Type;\n(function (Type) {\n  Type[Type[\"Document\"] = 1] = \"Document\";\n  Type[Type[\"CodeBlock\"] = 2] = \"CodeBlock\";\n  Type[Type[\"FencedCode\"] = 3] = \"FencedCode\";\n  Type[Type[\"Blockquote\"] = 4] = \"Blockquote\";\n  Type[Type[\"HorizontalRule\"] = 5] = \"HorizontalRule\";\n  Type[Type[\"BulletList\"] = 6] = \"BulletList\";\n  Type[Type[\"OrderedList\"] = 7] = \"OrderedList\";\n  Type[Type[\"ListItem\"] = 8] = \"ListItem\";\n  Type[Type[\"ATXHeading1\"] = 9] = \"ATXHeading1\";\n  Type[Type[\"ATXHeading2\"] = 10] = \"ATXHeading2\";\n  Type[Type[\"ATXHeading3\"] = 11] = \"ATXHeading3\";\n  Type[Type[\"ATXHeading4\"] = 12] = \"ATXHeading4\";\n  Type[Type[\"ATXHeading5\"] = 13] = \"ATXHeading5\";\n  Type[Type[\"ATXHeading6\"] = 14] = \"ATXHeading6\";\n  Type[Type[\"SetextHeading1\"] = 15] = \"SetextHeading1\";\n  Type[Type[\"SetextHeading2\"] = 16] = \"SetextHeading2\";\n  Type[Type[\"HTMLBlock\"] = 17] = \"HTMLBlock\";\n  Type[Type[\"LinkReference\"] = 18] = \"LinkReference\";\n  Type[Type[\"Paragraph\"] = 19] = \"Paragraph\";\n  Type[Type[\"CommentBlock\"] = 20] = \"CommentBlock\";\n  Type[Type[\"ProcessingInstructionBlock\"] = 21] = \"ProcessingInstructionBlock\";\n  // Inline\n  Type[Type[\"Escape\"] = 22] = \"Escape\";\n  Type[Type[\"Entity\"] = 23] = \"Entity\";\n  Type[Type[\"HardBreak\"] = 24] = \"HardBreak\";\n  Type[Type[\"Emphasis\"] = 25] = \"Emphasis\";\n  Type[Type[\"StrongEmphasis\"] = 26] = \"StrongEmphasis\";\n  Type[Type[\"Link\"] = 27] = \"Link\";\n  Type[Type[\"Image\"] = 28] = \"Image\";\n  Type[Type[\"InlineCode\"] = 29] = \"InlineCode\";\n  Type[Type[\"HTMLTag\"] = 30] = \"HTMLTag\";\n  Type[Type[\"Comment\"] = 31] = \"Comment\";\n  Type[Type[\"ProcessingInstruction\"] = 32] = \"ProcessingInstruction\";\n  Type[Type[\"Autolink\"] = 33] = \"Autolink\";\n  // Smaller tokens\n  Type[Type[\"HeaderMark\"] = 34] = \"HeaderMark\";\n  Type[Type[\"QuoteMark\"] = 35] = \"QuoteMark\";\n  Type[Type[\"ListMark\"] = 36] = \"ListMark\";\n  Type[Type[\"LinkMark\"] = 37] = \"LinkMark\";\n  Type[Type[\"EmphasisMark\"] = 38] = \"EmphasisMark\";\n  Type[Type[\"CodeMark\"] = 39] = \"CodeMark\";\n  Type[Type[\"CodeText\"] = 40] = \"CodeText\";\n  Type[Type[\"CodeInfo\"] = 41] = \"CodeInfo\";\n  Type[Type[\"LinkTitle\"] = 42] = \"LinkTitle\";\n  Type[Type[\"LinkLabel\"] = 43] = \"LinkLabel\";\n  Type[Type[\"URL\"] = 44] = \"URL\";\n})(Type || (Type = {}));\n/// Data structure used to accumulate a block's content during [leaf\n/// block parsing](#BlockParser.leaf).\nclass LeafBlock {\n  /// @internal\n  constructor(\n  /// The start position of the block.\n  start,\n  /// The block's text content.\n  content) {\n    this.start = start;\n    this.content = content;\n    /// @internal\n    this.marks = [];\n    /// The block parsers active for this block.\n    this.parsers = [];\n  }\n}\n/// Data structure used during block-level per-line parsing.\nclass Line {\n  constructor() {\n    /// The line's full text.\n    this.text = \"\";\n    /// The base indent provided by the composite contexts (that have\n    /// been handled so far).\n    this.baseIndent = 0;\n    /// The string position corresponding to the base indent.\n    this.basePos = 0;\n    /// The number of contexts handled @internal\n    this.depth = 0;\n    /// Any markers (i.e. block quote markers) parsed for the contexts. @internal\n    this.markers = [];\n    /// The position of the next non-whitespace character beyond any\n    /// list, blockquote, or other composite block markers.\n    this.pos = 0;\n    /// The column of the next non-whitespace character.\n    this.indent = 0;\n    /// The character code of the character after `pos`.\n    this.next = -1;\n  }\n  /// @internal\n  forward() {\n    if (this.basePos > this.pos) this.forwardInner();\n  }\n  /// @internal\n  forwardInner() {\n    let newPos = this.skipSpace(this.basePos);\n    this.indent = this.countIndent(newPos, this.pos, this.indent);\n    this.pos = newPos;\n    this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);\n  }\n  /// Skip whitespace after the given position, return the position of\n  /// the next non-space character or the end of the line if there's\n  /// only space after `from`.\n  skipSpace(from) {\n    return skipSpace(this.text, from);\n  }\n  /// @internal\n  reset(text) {\n    this.text = text;\n    this.baseIndent = this.basePos = this.pos = this.indent = 0;\n    this.forwardInner();\n    this.depth = 1;\n    while (this.markers.length) this.markers.pop();\n  }\n  /// Move the line's base position forward to the given position.\n  /// This should only be called by composite [block\n  /// parsers](#BlockParser.parse) or [markup skipping\n  /// functions](#NodeSpec.composite).\n  moveBase(to) {\n    this.basePos = to;\n    this.baseIndent = this.countIndent(to, this.pos, this.indent);\n  }\n  /// Move the line's base position forward to the given _column_.\n  moveBaseColumn(indent) {\n    this.baseIndent = indent;\n    this.basePos = this.findColumn(indent);\n  }\n  /// Store a composite-block-level marker. Should be called from\n  /// [markup skipping functions](#NodeSpec.composite) when they\n  /// consume any non-whitespace characters.\n  addMarker(elt) {\n    this.markers.push(elt);\n  }\n  /// Find the column position at `to`, optionally starting at a given\n  /// position and column.\n  countIndent(to, from = 0, indent = 0) {\n    for (let i = from; i < to; i++) indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n    return indent;\n  }\n  /// Find the position corresponding to the given column.\n  findColumn(goal) {\n    let i = 0;\n    for (let indent = 0; i < this.text.length && indent < goal; i++) indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n    return i;\n  }\n  /// @internal\n  scrub() {\n    if (!this.baseIndent) return this.text;\n    let result = \"\";\n    for (let i = 0; i < this.basePos; i++) result += \" \";\n    return result + this.text.slice(this.basePos);\n  }\n}\nfunction skipForList(bl, cx, line) {\n  if (line.pos == line.text.length || bl != cx.block && line.indent >= cx.stack[line.depth + 1].value + line.baseIndent) return true;\n  if (line.indent >= line.baseIndent + 4) return false;\n  let size = (bl.type == Type.OrderedList ? isOrderedList : isBulletList)(line, cx, false);\n  return size > 0 && (bl.type != Type.BulletList || isHorizontalRule(line, cx, false) < 0) && line.text.charCodeAt(line.pos + size - 1) == bl.value;\n}\nconst DefaultSkipMarkup = {\n  [Type.Blockquote](bl, cx, line) {\n    if (line.next != 62 /* '>' */) return false;\n    line.markers.push(elt(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1));\n    line.moveBase(line.pos + (space(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));\n    bl.end = cx.lineStart + line.text.length;\n    return true;\n  },\n  [Type.ListItem](bl, _cx, line) {\n    if (line.indent < line.baseIndent + bl.value && line.next > -1) return false;\n    line.moveBaseColumn(line.baseIndent + bl.value);\n    return true;\n  },\n  [Type.OrderedList]: skipForList,\n  [Type.BulletList]: skipForList,\n  [Type.Document]() {\n    return true;\n  }\n};\nfunction space(ch) {\n  return ch == 32 || ch == 9 || ch == 10 || ch == 13;\n}\nfunction skipSpace(line, i = 0) {\n  while (i < line.length && space(line.charCodeAt(i))) i++;\n  return i;\n}\nfunction skipSpaceBack(line, i, to) {\n  while (i > to && space(line.charCodeAt(i - 1))) i--;\n  return i;\n}\nfunction isFencedCode(line) {\n  if (line.next != 96 && line.next != 126 /* '`~' */) return -1;\n  let pos = line.pos + 1;\n  while (pos < line.text.length && line.text.charCodeAt(pos) == line.next) pos++;\n  if (pos < line.pos + 3) return -1;\n  if (line.next == 96) for (let i = pos; i < line.text.length; i++) if (line.text.charCodeAt(i) == 96) return -1;\n  return pos;\n}\nfunction isBlockquote(line) {\n  return line.next != 62 /* '>' */ ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;\n}\nfunction isHorizontalRule(line, cx, breaking) {\n  if (line.next != 42 && line.next != 45 && line.next != 95 /* '_-*' */) return -1;\n  let count = 1;\n  for (let pos = line.pos + 1; pos < line.text.length; pos++) {\n    let ch = line.text.charCodeAt(pos);\n    if (ch == line.next) count++;else if (!space(ch)) return -1;\n  }\n  // Setext headers take precedence\n  if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx.stack.length) return -1;\n  return count < 3 ? -1 : 1;\n}\nfunction inList(cx, type) {\n  for (let i = cx.stack.length - 1; i >= 0; i--) if (cx.stack[i].type == type) return true;\n  return false;\n}\nfunction isBulletList(line, cx, breaking) {\n  return (line.next == 45 || line.next == 43 || line.next == 42 /* '-+*' */) && (line.pos == line.text.length - 1 || space(line.text.charCodeAt(line.pos + 1))) && (!breaking || inList(cx, Type.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;\n}\nfunction isOrderedList(line, cx, breaking) {\n  let pos = line.pos,\n    next = line.next;\n  for (;;) {\n    if (next >= 48 && next <= 57 /* '0-9' */) pos++;else break;\n    if (pos == line.text.length) return -1;\n    next = line.text.charCodeAt(pos);\n  }\n  if (pos == line.pos || pos > line.pos + 9 || next != 46 && next != 41 /* '.)' */ || pos < line.text.length - 1 && !space(line.text.charCodeAt(pos + 1)) || breaking && !inList(cx, Type.OrderedList) && (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49 /* '1' */)) return -1;\n  return pos + 1 - line.pos;\n}\nfunction isAtxHeading(line) {\n  if (line.next != 35 /* '#' */) return -1;\n  let pos = line.pos + 1;\n  while (pos < line.text.length && line.text.charCodeAt(pos) == 35) pos++;\n  if (pos < line.text.length && line.text.charCodeAt(pos) != 32) return -1;\n  let size = pos - line.pos;\n  return size > 6 ? -1 : size;\n}\nfunction isSetextUnderline(line) {\n  if (line.next != 45 && line.next != 61 /* '-=' */ || line.indent >= line.baseIndent + 4) return -1;\n  let pos = line.pos + 1;\n  while (pos < line.text.length && line.text.charCodeAt(pos) == line.next) pos++;\n  let end = pos;\n  while (pos < line.text.length && space(line.text.charCodeAt(pos))) pos++;\n  return pos == line.text.length ? end : -1;\n}\nconst EmptyLine = /^[ \\t]*$/,\n  CommentEnd = /-->/,\n  ProcessingEnd = /\\?>/;\nconst HTMLBlockStyle = [[/^<(?:script|pre|style)(?:\\s|>|$)/i, /<\\/(?:script|pre|style)>/i], [/^\\s*<!--/, CommentEnd], [/^\\s*<\\?/, ProcessingEnd], [/^\\s*<![A-Z]/, />/], [/^\\s*<!\\[CDATA\\[/, /\\]\\]>/], [/^\\s*<\\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\\s|\\/?>|$)/i, EmptyLine], [/^\\s*(?:<\\/[a-z][\\w-]*\\s*>|<[a-z][\\w-]*(\\s+[a-z:_][\\w-.]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*>)\\s*$/i, EmptyLine]];\nfunction isHTMLBlock(line, _cx, breaking) {\n  if (line.next != 60 /* '<' */) return -1;\n  let rest = line.text.slice(line.pos);\n  for (let i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++) if (HTMLBlockStyle[i][0].test(rest)) return i;\n  return -1;\n}\nfunction getListIndent(line, pos) {\n  let indentAfter = line.countIndent(pos, line.pos, line.indent);\n  let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);\n  return indented >= indentAfter + 5 ? indentAfter + 1 : indented;\n}\nfunction addCodeText(marks, from, to) {\n  let last = marks.length - 1;\n  if (last >= 0 && marks[last].to == from && marks[last].type == Type.CodeText) marks[last].to = to;else marks.push(elt(Type.CodeText, from, to));\n}\n// Rules for parsing blocks. A return value of false means the rule\n// doesn't apply here, true means it does. When true is returned and\n// `p.line` has been updated, the rule is assumed to have consumed a\n// leaf block. Otherwise, it is assumed to have opened a context.\nconst DefaultBlockParsers = {\n  LinkReference: undefined,\n  IndentedCode(cx, line) {\n    let base = line.baseIndent + 4;\n    if (line.indent < base) return false;\n    let start = line.findColumn(base);\n    let from = cx.lineStart + start,\n      to = cx.lineStart + line.text.length;\n    let marks = [],\n      pendingMarks = [];\n    addCodeText(marks, from, to);\n    while (cx.nextLine() && line.depth >= cx.stack.length) {\n      if (line.pos == line.text.length) {\n        // Empty\n        addCodeText(pendingMarks, cx.lineStart - 1, cx.lineStart);\n        for (let m of line.markers) pendingMarks.push(m);\n      } else if (line.indent < base) {\n        break;\n      } else {\n        if (pendingMarks.length) {\n          for (let m of pendingMarks) {\n            if (m.type == Type.CodeText) addCodeText(marks, m.from, m.to);else marks.push(m);\n          }\n          pendingMarks = [];\n        }\n        addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n        for (let m of line.markers) marks.push(m);\n        to = cx.lineStart + line.text.length;\n        let codeStart = cx.lineStart + line.findColumn(line.baseIndent + 4);\n        if (codeStart < to) addCodeText(marks, codeStart, to);\n      }\n    }\n    if (pendingMarks.length) {\n      pendingMarks = pendingMarks.filter(m => m.type != Type.CodeText);\n      if (pendingMarks.length) line.markers = pendingMarks.concat(line.markers);\n    }\n    cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type.CodeBlock, to - from), from);\n    return true;\n  },\n  FencedCode(cx, line) {\n    let fenceEnd = isFencedCode(line);\n    if (fenceEnd < 0) return false;\n    let from = cx.lineStart + line.pos,\n      ch = line.next,\n      len = fenceEnd - line.pos;\n    let infoFrom = line.skipSpace(fenceEnd),\n      infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);\n    let marks = [elt(Type.CodeMark, from, from + len)];\n    if (infoFrom < infoTo) marks.push(elt(Type.CodeInfo, cx.lineStart + infoFrom, cx.lineStart + infoTo));\n    for (let first = true; cx.nextLine() && line.depth >= cx.stack.length; first = false) {\n      let i = line.pos;\n      if (line.indent - line.baseIndent < 4) while (i < line.text.length && line.text.charCodeAt(i) == ch) i++;\n      if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {\n        for (let m of line.markers) marks.push(m);\n        marks.push(elt(Type.CodeMark, cx.lineStart + line.pos, cx.lineStart + i));\n        cx.nextLine();\n        break;\n      } else {\n        if (!first) addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n        for (let m of line.markers) marks.push(m);\n        let textStart = cx.lineStart + line.basePos,\n          textEnd = cx.lineStart + line.text.length;\n        if (textStart < textEnd) addCodeText(marks, textStart, textEnd);\n      }\n    }\n    cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type.FencedCode, cx.prevLineEnd() - from), from);\n    return true;\n  },\n  Blockquote(cx, line) {\n    let size = isBlockquote(line);\n    if (size < 0) return false;\n    cx.startContext(Type.Blockquote, line.pos);\n    cx.addNode(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1);\n    line.moveBase(line.pos + size);\n    return null;\n  },\n  HorizontalRule(cx, line) {\n    if (isHorizontalRule(line, cx, false) < 0) return false;\n    let from = cx.lineStart + line.pos;\n    cx.nextLine();\n    cx.addNode(Type.HorizontalRule, from);\n    return true;\n  },\n  BulletList(cx, line) {\n    let size = isBulletList(line, cx, false);\n    if (size < 0) return false;\n    if (cx.block.type != Type.BulletList) cx.startContext(Type.BulletList, line.basePos, line.next);\n    let newBase = getListIndent(line, line.pos + 1);\n    cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n    cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n    line.moveBaseColumn(newBase);\n    return null;\n  },\n  OrderedList(cx, line) {\n    let size = isOrderedList(line, cx, false);\n    if (size < 0) return false;\n    if (cx.block.type != Type.OrderedList) cx.startContext(Type.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));\n    let newBase = getListIndent(line, line.pos + size);\n    cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n    cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n    line.moveBaseColumn(newBase);\n    return null;\n  },\n  ATXHeading(cx, line) {\n    let size = isAtxHeading(line);\n    if (size < 0) return false;\n    let off = line.pos,\n      from = cx.lineStart + off;\n    let endOfSpace = skipSpaceBack(line.text, line.text.length, off),\n      after = endOfSpace;\n    while (after > off && line.text.charCodeAt(after - 1) == line.next) after--;\n    if (after == endOfSpace || after == off || !space(line.text.charCodeAt(after - 1))) after = line.text.length;\n    let buf = cx.buffer.write(Type.HeaderMark, 0, size).writeElements(cx.parser.parseInline(line.text.slice(off + size + 1, after), from + size + 1), -from);\n    if (after < line.text.length) buf.write(Type.HeaderMark, after - off, endOfSpace - off);\n    let node = buf.finish(Type.ATXHeading1 - 1 + size, line.text.length - off);\n    cx.nextLine();\n    cx.addNode(node, from);\n    return true;\n  },\n  HTMLBlock(cx, line) {\n    let type = isHTMLBlock(line, cx, false);\n    if (type < 0) return false;\n    let from = cx.lineStart + line.pos,\n      end = HTMLBlockStyle[type][1];\n    let marks = [],\n      trailing = end != EmptyLine;\n    while (!end.test(line.text) && cx.nextLine()) {\n      if (line.depth < cx.stack.length) {\n        trailing = false;\n        break;\n      }\n      for (let m of line.markers) marks.push(m);\n    }\n    if (trailing) cx.nextLine();\n    let nodeType = end == CommentEnd ? Type.CommentBlock : end == ProcessingEnd ? Type.ProcessingInstructionBlock : Type.HTMLBlock;\n    let to = cx.prevLineEnd();\n    cx.addNode(cx.buffer.writeElements(marks, -from).finish(nodeType, to - from), from);\n    return true;\n  },\n  SetextHeading: undefined // Specifies relative precedence for block-continue function\n};\n// This implements a state machine that incrementally parses link references. At each\n// next line, it looks ahead to see if the line continues the reference or not. If it\n// doesn't and a valid link is available ending before that line, it finishes that.\n// Similarly, on `finish` (when the leaf is terminated by external circumstances), it\n// creates a link reference if there's a valid reference up to the current point.\nclass LinkReferenceParser {\n  constructor(leaf) {\n    this.stage = 0 /* RefStage.Start */;\n    this.elts = [];\n    this.pos = 0;\n    this.start = leaf.start;\n    this.advance(leaf.content);\n  }\n  nextLine(cx, line, leaf) {\n    if (this.stage == -1 /* RefStage.Failed */) return false;\n    let content = leaf.content + \"\\n\" + line.scrub();\n    let finish = this.advance(content);\n    if (finish > -1 && finish < content.length) return this.complete(cx, leaf, finish);\n    return false;\n  }\n  finish(cx, leaf) {\n    if ((this.stage == 2 /* RefStage.Link */ || this.stage == 3 /* RefStage.Title */) && skipSpace(leaf.content, this.pos) == leaf.content.length) return this.complete(cx, leaf, leaf.content.length);\n    return false;\n  }\n  complete(cx, leaf, len) {\n    cx.addLeafElement(leaf, elt(Type.LinkReference, this.start, this.start + len, this.elts));\n    return true;\n  }\n  nextStage(elt) {\n    if (elt) {\n      this.pos = elt.to - this.start;\n      this.elts.push(elt);\n      this.stage++;\n      return true;\n    }\n    if (elt === false) this.stage = -1 /* RefStage.Failed */;\n    return false;\n  }\n  advance(content) {\n    for (;;) {\n      if (this.stage == -1 /* RefStage.Failed */) {\n        return -1;\n      } else if (this.stage == 0 /* RefStage.Start */) {\n        if (!this.nextStage(parseLinkLabel(content, this.pos, this.start, true))) return -1;\n        if (content.charCodeAt(this.pos) != 58 /* ':' */) return this.stage = -1 /* RefStage.Failed */;\n        this.elts.push(elt(Type.LinkMark, this.pos + this.start, this.pos + this.start + 1));\n        this.pos++;\n      } else if (this.stage == 1 /* RefStage.Label */) {\n        if (!this.nextStage(parseURL(content, skipSpace(content, this.pos), this.start))) return -1;\n      } else if (this.stage == 2 /* RefStage.Link */) {\n        let skip = skipSpace(content, this.pos),\n          end = 0;\n        if (skip > this.pos) {\n          let title = parseLinkTitle(content, skip, this.start);\n          if (title) {\n            let titleEnd = lineEnd(content, title.to - this.start);\n            if (titleEnd > 0) {\n              this.nextStage(title);\n              end = titleEnd;\n            }\n          }\n        }\n        if (!end) end = lineEnd(content, this.pos);\n        return end > 0 && end < content.length ? end : -1;\n      } else {\n        // RefStage.Title\n        return lineEnd(content, this.pos);\n      }\n    }\n  }\n}\nfunction lineEnd(text, pos) {\n  for (; pos < text.length; pos++) {\n    let next = text.charCodeAt(pos);\n    if (next == 10) break;\n    if (!space(next)) return -1;\n  }\n  return pos;\n}\nclass SetextHeadingParser {\n  nextLine(cx, line, leaf) {\n    let underline = line.depth < cx.stack.length ? -1 : isSetextUnderline(line);\n    let next = line.next;\n    if (underline < 0) return false;\n    let underlineMark = elt(Type.HeaderMark, cx.lineStart + line.pos, cx.lineStart + underline);\n    cx.nextLine();\n    cx.addLeafElement(leaf, elt(next == 61 ? Type.SetextHeading1 : Type.SetextHeading2, leaf.start, cx.prevLineEnd(), [...cx.parser.parseInline(leaf.content, leaf.start), underlineMark]));\n    return true;\n  }\n  finish() {\n    return false;\n  }\n}\nconst DefaultLeafBlocks = {\n  LinkReference(_, leaf) {\n    return leaf.content.charCodeAt(0) == 91 /* '[' */ ? new LinkReferenceParser(leaf) : null;\n  },\n  SetextHeading() {\n    return new SetextHeadingParser();\n  }\n};\nconst DefaultEndLeaf = [(_, line) => isAtxHeading(line) >= 0, (_, line) => isFencedCode(line) >= 0, (_, line) => isBlockquote(line) >= 0, (p, line) => isBulletList(line, p, true) >= 0, (p, line) => isOrderedList(line, p, true) >= 0, (p, line) => isHorizontalRule(line, p, true) >= 0, (p, line) => isHTMLBlock(line, p, true) >= 0];\nconst scanLineResult = {\n  text: \"\",\n  end: 0\n};\n/// Block-level parsing functions get access to this context object.\nclass BlockContext {\n  /// @internal\n  constructor(\n  /// The parser configuration used.\n  parser,\n  /// @internal\n  input, fragments,\n  /// @internal\n  ranges) {\n    this.parser = parser;\n    this.input = input;\n    this.ranges = ranges;\n    this.line = new Line();\n    this.atEnd = false;\n    /// For reused nodes on gaps, we can't directly put the original\n    /// node into the tree, since that may be bitter than its parent.\n    /// When this happens, we create a dummy tree that is replaced by\n    /// the proper node in `injectGaps` @internal\n    this.reusePlaceholders = new Map();\n    this.stoppedAt = null;\n    /// The range index that absoluteLineStart points into @internal\n    this.rangeI = 0;\n    this.to = ranges[ranges.length - 1].to;\n    this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;\n    this.block = CompositeBlock.create(Type.Document, 0, this.lineStart, 0, 0);\n    this.stack = [this.block];\n    this.fragments = fragments.length ? new FragmentCursor(fragments, input) : null;\n    this.readLine();\n  }\n  get parsedPos() {\n    return this.absoluteLineStart;\n  }\n  advance() {\n    if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt) return this.finish();\n    let {\n      line\n    } = this;\n    for (;;) {\n      for (let markI = 0;;) {\n        let next = line.depth < this.stack.length ? this.stack[this.stack.length - 1] : null;\n        while (markI < line.markers.length && (!next || line.markers[markI].from < next.end)) {\n          let mark = line.markers[markI++];\n          this.addNode(mark.type, mark.from, mark.to);\n        }\n        if (!next) break;\n        this.finishContext();\n      }\n      if (line.pos < line.text.length) break;\n      // Empty line\n      if (!this.nextLine()) return this.finish();\n    }\n    if (this.fragments && this.reuseFragment(line.basePos)) return null;\n    start: for (;;) {\n      for (let type of this.parser.blockParsers) if (type) {\n        let result = type(this, line);\n        if (result != false) {\n          if (result == true) return null;\n          line.forward();\n          continue start;\n        }\n      }\n      break;\n    }\n    let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));\n    for (let parse of this.parser.leafBlockParsers) if (parse) {\n      let parser = parse(this, leaf);\n      if (parser) leaf.parsers.push(parser);\n    }\n    lines: while (this.nextLine()) {\n      if (line.pos == line.text.length) break;\n      if (line.indent < line.baseIndent + 4) {\n        for (let stop of this.parser.endLeafBlock) if (stop(this, line, leaf)) break lines;\n      }\n      for (let parser of leaf.parsers) if (parser.nextLine(this, line, leaf)) return null;\n      leaf.content += \"\\n\" + line.scrub();\n      for (let m of line.markers) leaf.marks.push(m);\n    }\n    this.finishLeaf(leaf);\n    return null;\n  }\n  stopAt(pos) {\n    if (this.stoppedAt != null && this.stoppedAt < pos) throw new RangeError(\"Can't move stoppedAt forward\");\n    this.stoppedAt = pos;\n  }\n  reuseFragment(start) {\n    if (!this.fragments.moveTo(this.absoluteLineStart + start, this.absoluteLineStart) || !this.fragments.matches(this.block.hash)) return false;\n    let taken = this.fragments.takeNodes(this);\n    if (!taken) return false;\n    this.absoluteLineStart += taken;\n    this.lineStart = toRelative(this.absoluteLineStart, this.ranges);\n    this.moveRangeI();\n    if (this.absoluteLineStart < this.to) {\n      this.lineStart++;\n      this.absoluteLineStart++;\n      this.readLine();\n    } else {\n      this.atEnd = true;\n      this.readLine();\n    }\n    return true;\n  }\n  /// The number of parent blocks surrounding the current block.\n  get depth() {\n    return this.stack.length;\n  }\n  /// Get the type of the parent block at the given depth. When no\n  /// depth is passed, return the type of the innermost parent.\n  parentType(depth = this.depth - 1) {\n    return this.parser.nodeSet.types[this.stack[depth].type];\n  }\n  /// Move to the next input line. This should only be called by\n  /// (non-composite) [block parsers](#BlockParser.parse) that consume\n  /// the line directly, or leaf block parser\n  /// [`nextLine`](#LeafBlockParser.nextLine) methods when they\n  /// consume the current line (and return true).\n  nextLine() {\n    this.lineStart += this.line.text.length;\n    if (this.absoluteLineEnd >= this.to) {\n      this.absoluteLineStart = this.absoluteLineEnd;\n      this.atEnd = true;\n      this.readLine();\n      return false;\n    } else {\n      this.lineStart++;\n      this.absoluteLineStart = this.absoluteLineEnd + 1;\n      this.moveRangeI();\n      this.readLine();\n      return true;\n    }\n  }\n  moveRangeI() {\n    while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to) {\n      this.rangeI++;\n      this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);\n    }\n  }\n  /// @internal\n  scanLine(start) {\n    let r = scanLineResult;\n    r.end = start;\n    if (start >= this.to) {\n      r.text = \"\";\n    } else {\n      r.text = this.lineChunkAt(start);\n      r.end += r.text.length;\n      if (this.ranges.length > 1) {\n        let textOffset = this.absoluteLineStart,\n          rangeI = this.rangeI;\n        while (this.ranges[rangeI].to < r.end) {\n          rangeI++;\n          let nextFrom = this.ranges[rangeI].from;\n          let after = this.lineChunkAt(nextFrom);\n          r.end = nextFrom + after.length;\n          r.text = r.text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;\n          textOffset = r.end - r.text.length;\n        }\n      }\n    }\n    return r;\n  }\n  /// @internal\n  readLine() {\n    let {\n        line\n      } = this,\n      {\n        text,\n        end\n      } = this.scanLine(this.absoluteLineStart);\n    this.absoluteLineEnd = end;\n    line.reset(text);\n    for (; line.depth < this.stack.length; line.depth++) {\n      let cx = this.stack[line.depth],\n        handler = this.parser.skipContextMarkup[cx.type];\n      if (!handler) throw new Error(\"Unhandled block context \" + Type[cx.type]);\n      if (!handler(cx, this, line)) break;\n      line.forward();\n    }\n  }\n  lineChunkAt(pos) {\n    let next = this.input.chunk(pos),\n      text;\n    if (!this.input.lineChunks) {\n      let eol = next.indexOf(\"\\n\");\n      text = eol < 0 ? next : next.slice(0, eol);\n    } else {\n      text = next == \"\\n\" ? \"\" : next;\n    }\n    return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;\n  }\n  /// The end position of the previous line.\n  prevLineEnd() {\n    return this.atEnd ? this.lineStart : this.lineStart - 1;\n  }\n  /// @internal\n  startContext(type, start, value = 0) {\n    this.block = CompositeBlock.create(type, value, this.lineStart + start, this.block.hash, this.lineStart + this.line.text.length);\n    this.stack.push(this.block);\n  }\n  /// Start a composite block. Should only be called from [block\n  /// parser functions](#BlockParser.parse) that return null.\n  startComposite(type, start, value = 0) {\n    this.startContext(this.parser.getNodeType(type), start, value);\n  }\n  /// @internal\n  addNode(block, from, to) {\n    if (typeof block == \"number\") block = new Tree(this.parser.nodeSet.types[block], none, none, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from);\n    this.block.addChild(block, from - this.block.from);\n  }\n  /// Add a block element. Can be called by [block\n  /// parsers](#BlockParser.parse).\n  addElement(elt) {\n    this.block.addChild(elt.toTree(this.parser.nodeSet), elt.from - this.block.from);\n  }\n  /// Add a block element from a [leaf parser](#LeafBlockParser). This\n  /// makes sure any extra composite block markup (such as blockquote\n  /// markers) inside the block are also added to the syntax tree.\n  addLeafElement(leaf, elt) {\n    this.addNode(this.buffer.writeElements(injectMarks(elt.children, leaf.marks), -elt.from).finish(elt.type, elt.to - elt.from), elt.from);\n  }\n  /// @internal\n  finishContext() {\n    let cx = this.stack.pop();\n    let top = this.stack[this.stack.length - 1];\n    top.addChild(cx.toTree(this.parser.nodeSet), cx.from - top.from);\n    this.block = top;\n  }\n  finish() {\n    while (this.stack.length > 1) this.finishContext();\n    return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));\n  }\n  addGaps(tree) {\n    return this.ranges.length > 1 ? injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.reusePlaceholders) : tree;\n  }\n  /// @internal\n  finishLeaf(leaf) {\n    for (let parser of leaf.parsers) if (parser.finish(this, leaf)) return;\n    let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);\n    this.addNode(this.buffer.writeElements(inline, -leaf.start).finish(Type.Paragraph, leaf.content.length), leaf.start);\n  }\n  elt(type, from, to, children) {\n    if (typeof type == \"string\") return elt(this.parser.getNodeType(type), from, to, children);\n    return new TreeElement(type, from);\n  }\n  /// @internal\n  get buffer() {\n    return new Buffer(this.parser.nodeSet);\n  }\n}\nfunction injectGaps(ranges, rangeI, tree, offset, dummies) {\n  let rangeEnd = ranges[rangeI].to;\n  let children = [],\n    positions = [],\n    start = tree.from + offset;\n  function movePastNext(upto, inclusive) {\n    while (inclusive ? upto >= rangeEnd : upto > rangeEnd) {\n      let size = ranges[rangeI + 1].from - rangeEnd;\n      offset += size;\n      upto += size;\n      rangeI++;\n      rangeEnd = ranges[rangeI].to;\n    }\n  }\n  for (let ch = tree.firstChild; ch; ch = ch.nextSibling) {\n    movePastNext(ch.from + offset, true);\n    let from = ch.from + offset,\n      node,\n      reuse = dummies.get(ch.tree);\n    if (reuse) {\n      node = reuse;\n    } else if (ch.to + offset > rangeEnd) {\n      node = injectGaps(ranges, rangeI, ch, offset, dummies);\n      movePastNext(ch.to + offset, false);\n    } else {\n      node = ch.toTree();\n    }\n    children.push(node);\n    positions.push(from - start);\n  }\n  movePastNext(tree.to + offset, false);\n  return new Tree(tree.type, children, positions, tree.to + offset - start, tree.tree ? tree.tree.propValues : undefined);\n}\n/// A Markdown parser configuration.\nclass MarkdownParser extends Parser {\n  /// @internal\n  constructor(\n  /// The parser's syntax [node\n  /// types](https://lezer.codemirror.net/docs/ref/#common.NodeSet).\n  nodeSet,\n  /// @internal\n  blockParsers,\n  /// @internal\n  leafBlockParsers,\n  /// @internal\n  blockNames,\n  /// @internal\n  endLeafBlock,\n  /// @internal\n  skipContextMarkup,\n  /// @internal\n  inlineParsers,\n  /// @internal\n  inlineNames,\n  /// @internal\n  wrappers) {\n    super();\n    this.nodeSet = nodeSet;\n    this.blockParsers = blockParsers;\n    this.leafBlockParsers = leafBlockParsers;\n    this.blockNames = blockNames;\n    this.endLeafBlock = endLeafBlock;\n    this.skipContextMarkup = skipContextMarkup;\n    this.inlineParsers = inlineParsers;\n    this.inlineNames = inlineNames;\n    this.wrappers = wrappers;\n    /// @internal\n    this.nodeTypes = Object.create(null);\n    for (let t of nodeSet.types) this.nodeTypes[t.name] = t.id;\n  }\n  createParse(input, fragments, ranges) {\n    let parse = new BlockContext(this, input, fragments, ranges);\n    for (let w of this.wrappers) parse = w(parse, input, fragments, ranges);\n    return parse;\n  }\n  /// Reconfigure the parser.\n  configure(spec) {\n    let config = resolveConfig(spec);\n    if (!config) return this;\n    let {\n      nodeSet,\n      skipContextMarkup\n    } = this;\n    let blockParsers = this.blockParsers.slice(),\n      leafBlockParsers = this.leafBlockParsers.slice(),\n      blockNames = this.blockNames.slice(),\n      inlineParsers = this.inlineParsers.slice(),\n      inlineNames = this.inlineNames.slice(),\n      endLeafBlock = this.endLeafBlock.slice(),\n      wrappers = this.wrappers;\n    if (nonEmpty(config.defineNodes)) {\n      skipContextMarkup = Object.assign({}, skipContextMarkup);\n      let nodeTypes = nodeSet.types.slice(),\n        styles;\n      for (let s of config.defineNodes) {\n        let {\n          name,\n          block,\n          composite,\n          style\n        } = typeof s == \"string\" ? {\n          name: s\n        } : s;\n        if (nodeTypes.some(t => t.name == name)) continue;\n        if (composite) skipContextMarkup[nodeTypes.length] = (bl, cx, line) => composite(cx, line, bl.value);\n        let id = nodeTypes.length;\n        let group = composite ? [\"Block\", \"BlockContext\"] : !block ? undefined : id >= Type.ATXHeading1 && id <= Type.SetextHeading2 ? [\"Block\", \"LeafBlock\", \"Heading\"] : [\"Block\", \"LeafBlock\"];\n        nodeTypes.push(NodeType.define({\n          id,\n          name,\n          props: group && [[NodeProp.group, group]]\n        }));\n        if (style) {\n          if (!styles) styles = {};\n          if (Array.isArray(style) || style instanceof Tag) styles[name] = style;else Object.assign(styles, style);\n        }\n      }\n      nodeSet = new NodeSet(nodeTypes);\n      if (styles) nodeSet = nodeSet.extend(styleTags(styles));\n    }\n    if (nonEmpty(config.props)) nodeSet = nodeSet.extend(...config.props);\n    if (nonEmpty(config.remove)) {\n      for (let rm of config.remove) {\n        let block = this.blockNames.indexOf(rm),\n          inline = this.inlineNames.indexOf(rm);\n        if (block > -1) blockParsers[block] = leafBlockParsers[block] = undefined;\n        if (inline > -1) inlineParsers[inline] = undefined;\n      }\n    }\n    if (nonEmpty(config.parseBlock)) {\n      for (let spec of config.parseBlock) {\n        let found = blockNames.indexOf(spec.name);\n        if (found > -1) {\n          blockParsers[found] = spec.parse;\n          leafBlockParsers[found] = spec.leaf;\n        } else {\n          let pos = spec.before ? findName(blockNames, spec.before) : spec.after ? findName(blockNames, spec.after) + 1 : blockNames.length - 1;\n          blockParsers.splice(pos, 0, spec.parse);\n          leafBlockParsers.splice(pos, 0, spec.leaf);\n          blockNames.splice(pos, 0, spec.name);\n        }\n        if (spec.endLeaf) endLeafBlock.push(spec.endLeaf);\n      }\n    }\n    if (nonEmpty(config.parseInline)) {\n      for (let spec of config.parseInline) {\n        let found = inlineNames.indexOf(spec.name);\n        if (found > -1) {\n          inlineParsers[found] = spec.parse;\n        } else {\n          let pos = spec.before ? findName(inlineNames, spec.before) : spec.after ? findName(inlineNames, spec.after) + 1 : inlineNames.length - 1;\n          inlineParsers.splice(pos, 0, spec.parse);\n          inlineNames.splice(pos, 0, spec.name);\n        }\n      }\n    }\n    if (config.wrap) wrappers = wrappers.concat(config.wrap);\n    return new MarkdownParser(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);\n  }\n  /// @internal\n  getNodeType(name) {\n    let found = this.nodeTypes[name];\n    if (found == null) throw new RangeError(`Unknown node type '${name}'`);\n    return found;\n  }\n  /// Parse the given piece of inline text at the given offset,\n  /// returning an array of [`Element`](#Element) objects representing\n  /// the inline content.\n  parseInline(text, offset) {\n    let cx = new InlineContext(this, text, offset);\n    outer: for (let pos = offset; pos < cx.end;) {\n      let next = cx.char(pos);\n      for (let token of this.inlineParsers) if (token) {\n        let result = token(cx, next, pos);\n        if (result >= 0) {\n          pos = result;\n          continue outer;\n        }\n      }\n      pos++;\n    }\n    return cx.resolveMarkers(0);\n  }\n}\nfunction nonEmpty(a) {\n  return a != null && a.length > 0;\n}\nfunction resolveConfig(spec) {\n  if (!Array.isArray(spec)) return spec;\n  if (spec.length == 0) return null;\n  let conf = resolveConfig(spec[0]);\n  if (spec.length == 1) return conf;\n  let rest = resolveConfig(spec.slice(1));\n  if (!rest || !conf) return conf || rest;\n  let conc = (a, b) => (a || none).concat(b || none);\n  let wrapA = conf.wrap,\n    wrapB = rest.wrap;\n  return {\n    props: conc(conf.props, rest.props),\n    defineNodes: conc(conf.defineNodes, rest.defineNodes),\n    parseBlock: conc(conf.parseBlock, rest.parseBlock),\n    parseInline: conc(conf.parseInline, rest.parseInline),\n    remove: conc(conf.remove, rest.remove),\n    wrap: !wrapA ? wrapB : !wrapB ? wrapA : (inner, input, fragments, ranges) => wrapA(wrapB(inner, input, fragments, ranges), input, fragments, ranges)\n  };\n}\nfunction findName(names, name) {\n  let found = names.indexOf(name);\n  if (found < 0) throw new RangeError(`Position specified relative to unknown parser ${name}`);\n  return found;\n}\nlet nodeTypes = [NodeType.none];\nfor (let i = 1, name; name = Type[i]; i++) {\n  nodeTypes[i] = NodeType.define({\n    id: i,\n    name,\n    props: i >= Type.Escape ? [] : [[NodeProp.group, i in DefaultSkipMarkup ? [\"Block\", \"BlockContext\"] : [\"Block\", \"LeafBlock\"]]],\n    top: name == \"Document\"\n  });\n}\nconst none = [];\nclass Buffer {\n  constructor(nodeSet) {\n    this.nodeSet = nodeSet;\n    this.content = [];\n    this.nodes = [];\n  }\n  write(type, from, to, children = 0) {\n    this.content.push(type, from, to, 4 + children * 4);\n    return this;\n  }\n  writeElements(elts, offset = 0) {\n    for (let e of elts) e.writeTo(this, offset);\n    return this;\n  }\n  finish(type, length) {\n    return Tree.build({\n      buffer: this.content,\n      nodeSet: this.nodeSet,\n      reused: this.nodes,\n      topID: type,\n      length\n    });\n  }\n}\n/// Elements are used to compose syntax nodes during parsing.\nclass Element {\n  /// @internal\n  constructor(\n  /// The node's\n  /// [id](https://lezer.codemirror.net/docs/ref/#common.NodeType.id).\n  type,\n  /// The start of the node, as an offset from the start of the document.\n  from,\n  /// The end of the node.\n  to,\n  /// The node's child nodes @internal\n  children = none) {\n    this.type = type;\n    this.from = from;\n    this.to = to;\n    this.children = children;\n  }\n  /// @internal\n  writeTo(buf, offset) {\n    let startOff = buf.content.length;\n    buf.writeElements(this.children, offset);\n    buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);\n  }\n  /// @internal\n  toTree(nodeSet) {\n    return new Buffer(nodeSet).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);\n  }\n}\nclass TreeElement {\n  constructor(tree, from) {\n    this.tree = tree;\n    this.from = from;\n  }\n  get to() {\n    return this.from + this.tree.length;\n  }\n  get type() {\n    return this.tree.type.id;\n  }\n  get children() {\n    return none;\n  }\n  writeTo(buf, offset) {\n    buf.nodes.push(this.tree);\n    buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);\n  }\n  toTree() {\n    return this.tree;\n  }\n}\nfunction elt(type, from, to, children) {\n  return new Element(type, from, to, children);\n}\nconst EmphasisUnderscore = {\n  resolve: \"Emphasis\",\n  mark: \"EmphasisMark\"\n};\nconst EmphasisAsterisk = {\n  resolve: \"Emphasis\",\n  mark: \"EmphasisMark\"\n};\nconst LinkStart = {},\n  ImageStart = {};\nclass InlineDelimiter {\n  constructor(type, from, to, side) {\n    this.type = type;\n    this.from = from;\n    this.to = to;\n    this.side = side;\n  }\n}\nconst Escapable = \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\";\nlet Punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\u2010-\\u2027]/;\ntry {\n  Punctuation = new RegExp(\"[\\\\p{Pc}|\\\\p{Pd}|\\\\p{Pe}|\\\\p{Pf}|\\\\p{Pi}|\\\\p{Po}|\\\\p{Ps}]\", \"u\");\n} catch (_) {}\nconst DefaultInline = {\n  Escape(cx, next, start) {\n    if (next != 92 /* '\\\\' */ || start == cx.end - 1) return -1;\n    let escaped = cx.char(start + 1);\n    for (let i = 0; i < Escapable.length; i++) if (Escapable.charCodeAt(i) == escaped) return cx.append(elt(Type.Escape, start, start + 2));\n    return -1;\n  },\n  Entity(cx, next, start) {\n    if (next != 38 /* '&' */) return -1;\n    let m = /^(?:#\\d+|#x[a-f\\d]+|\\w+);/i.exec(cx.slice(start + 1, start + 31));\n    return m ? cx.append(elt(Type.Entity, start, start + 1 + m[0].length)) : -1;\n  },\n  InlineCode(cx, next, start) {\n    if (next != 96 /* '`' */ || start && cx.char(start - 1) == 96) return -1;\n    let pos = start + 1;\n    while (pos < cx.end && cx.char(pos) == 96) pos++;\n    let size = pos - start,\n      curSize = 0;\n    for (; pos < cx.end; pos++) {\n      if (cx.char(pos) == 96) {\n        curSize++;\n        if (curSize == size && cx.char(pos + 1) != 96) return cx.append(elt(Type.InlineCode, start, pos + 1, [elt(Type.CodeMark, start, start + size), elt(Type.CodeMark, pos + 1 - size, pos + 1)]));\n      } else {\n        curSize = 0;\n      }\n    }\n    return -1;\n  },\n  HTMLTag(cx, next, start) {\n    if (next != 60 /* '<' */ || start == cx.end - 1) return -1;\n    let after = cx.slice(start + 1, cx.end);\n    let url = /^(?:[a-z][-\\w+.]+:[^\\s>]+|[a-z\\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?(?:\\.[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?)*)>/i.exec(after);\n    if (url) {\n      return cx.append(elt(Type.Autolink, start, start + 1 + url[0].length, [elt(Type.LinkMark, start, start + 1),\n      // url[0] includes the closing bracket, so exclude it from this slice\n      elt(Type.URL, start + 1, start + url[0].length), elt(Type.LinkMark, start + url[0].length, start + 1 + url[0].length)]));\n    }\n    let comment = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);\n    if (comment) return cx.append(elt(Type.Comment, start, start + 1 + comment[0].length));\n    let procInst = /^\\?[^]*?\\?>/.exec(after);\n    if (procInst) return cx.append(elt(Type.ProcessingInstruction, start, start + 1 + procInst[0].length));\n    let m = /^(?:![A-Z][^]*?>|!\\[CDATA\\[[^]*?\\]\\]>|\\/\\s*[a-zA-Z][\\w-]*\\s*>|\\s*[a-zA-Z][\\w-]*(\\s+[a-zA-Z:_][\\w-.:]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*(\\/\\s*)?>)/.exec(after);\n    if (!m) return -1;\n    return cx.append(elt(Type.HTMLTag, start, start + 1 + m[0].length));\n  },\n  Emphasis(cx, next, start) {\n    if (next != 95 && next != 42) return -1;\n    let pos = start + 1;\n    while (cx.char(pos) == next) pos++;\n    let before = cx.slice(start - 1, start),\n      after = cx.slice(pos, pos + 1);\n    let pBefore = Punctuation.test(before),\n      pAfter = Punctuation.test(after);\n    let sBefore = /\\s|^$/.test(before),\n      sAfter = /\\s|^$/.test(after);\n    let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);\n    let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);\n    let canOpen = leftFlanking && (next == 42 || !rightFlanking || pBefore);\n    let canClose = rightFlanking && (next == 42 || !leftFlanking || pAfter);\n    return cx.append(new InlineDelimiter(next == 95 ? EmphasisUnderscore : EmphasisAsterisk, start, pos, (canOpen ? 1 /* Mark.Open */ : 0 /* Mark.None */) | (canClose ? 2 /* Mark.Close */ : 0 /* Mark.None */)));\n  },\n  HardBreak(cx, next, start) {\n    if (next == 92 /* '\\\\' */ && cx.char(start + 1) == 10 /* '\\n' */) return cx.append(elt(Type.HardBreak, start, start + 2));\n    if (next == 32) {\n      let pos = start + 1;\n      while (cx.char(pos) == 32) pos++;\n      if (cx.char(pos) == 10 && pos >= start + 2) return cx.append(elt(Type.HardBreak, start, pos + 1));\n    }\n    return -1;\n  },\n  Link(cx, next, start) {\n    return next == 91 /* '[' */ ? cx.append(new InlineDelimiter(LinkStart, start, start + 1, 1 /* Mark.Open */)) : -1;\n  },\n  Image(cx, next, start) {\n    return next == 33 /* '!' */ && cx.char(start + 1) == 91 /* '[' */ ? cx.append(new InlineDelimiter(ImageStart, start, start + 2, 1 /* Mark.Open */)) : -1;\n  },\n  LinkEnd(cx, next, start) {\n    if (next != 93 /* ']' */) return -1;\n    // Scanning back to the next link/image start marker\n    for (let i = cx.parts.length - 1; i >= 0; i--) {\n      let part = cx.parts[i];\n      if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {\n        // If this one has been set invalid (because it would produce\n        // a nested link) or there's no valid link here ignore both.\n        if (!part.side || cx.skipSpace(part.to) == start && !/[(\\[]/.test(cx.slice(start + 1, start + 2))) {\n          cx.parts[i] = null;\n          return -1;\n        }\n        // Finish the content and replace the entire range in\n        // this.parts with the link/image node.\n        let content = cx.takeContent(i);\n        let link = cx.parts[i] = finishLink(cx, content, part.type == LinkStart ? Type.Link : Type.Image, part.from, start + 1);\n        // Set any open-link markers before this link to invalid.\n        if (part.type == LinkStart) for (let j = 0; j < i; j++) {\n          let p = cx.parts[j];\n          if (p instanceof InlineDelimiter && p.type == LinkStart) p.side = 0 /* Mark.None */;\n        }\n        return link.to;\n      }\n    }\n    return -1;\n  }\n};\nfunction finishLink(cx, content, type, start, startPos) {\n  let {\n      text\n    } = cx,\n    next = cx.char(startPos),\n    endPos = startPos;\n  content.unshift(elt(Type.LinkMark, start, start + (type == Type.Image ? 2 : 1)));\n  content.push(elt(Type.LinkMark, startPos - 1, startPos));\n  if (next == 40 /* '(' */) {\n    let pos = cx.skipSpace(startPos + 1);\n    let dest = parseURL(text, pos - cx.offset, cx.offset),\n      title;\n    if (dest) {\n      pos = cx.skipSpace(dest.to);\n      // The destination and title must be separated by whitespace\n      if (pos != dest.to) {\n        title = parseLinkTitle(text, pos - cx.offset, cx.offset);\n        if (title) pos = cx.skipSpace(title.to);\n      }\n    }\n    if (cx.char(pos) == 41 /* ')' */) {\n      content.push(elt(Type.LinkMark, startPos, startPos + 1));\n      endPos = pos + 1;\n      if (dest) content.push(dest);\n      if (title) content.push(title);\n      content.push(elt(Type.LinkMark, pos, endPos));\n    }\n  } else if (next == 91 /* '[' */) {\n    let label = parseLinkLabel(text, startPos - cx.offset, cx.offset, false);\n    if (label) {\n      content.push(label);\n      endPos = label.to;\n    }\n  }\n  return elt(type, start, endPos, content);\n}\n// These return `null` when falling off the end of the input, `false`\n// when parsing fails otherwise (for use in the incremental link\n// reference parser).\nfunction parseURL(text, start, offset) {\n  let next = text.charCodeAt(start);\n  if (next == 60 /* '<' */) {\n    for (let pos = start + 1; pos < text.length; pos++) {\n      let ch = text.charCodeAt(pos);\n      if (ch == 62 /* '>' */) return elt(Type.URL, start + offset, pos + 1 + offset);\n      if (ch == 60 || ch == 10 /* '<\\n' */) return false;\n    }\n    return null;\n  } else {\n    let depth = 0,\n      pos = start;\n    for (let escaped = false; pos < text.length; pos++) {\n      let ch = text.charCodeAt(pos);\n      if (space(ch)) {\n        break;\n      } else if (escaped) {\n        escaped = false;\n      } else if (ch == 40 /* '(' */) {\n        depth++;\n      } else if (ch == 41 /* ')' */) {\n        if (!depth) break;\n        depth--;\n      } else if (ch == 92 /* '\\\\' */) {\n        escaped = true;\n      }\n    }\n    return pos > start ? elt(Type.URL, start + offset, pos + offset) : pos == text.length ? null : false;\n  }\n}\nfunction parseLinkTitle(text, start, offset) {\n  let next = text.charCodeAt(start);\n  if (next != 39 && next != 34 && next != 40 /* '\"\\'(' */) return false;\n  let end = next == 40 ? 41 : next;\n  for (let pos = start + 1, escaped = false; pos < text.length; pos++) {\n    let ch = text.charCodeAt(pos);\n    if (escaped) escaped = false;else if (ch == end) return elt(Type.LinkTitle, start + offset, pos + 1 + offset);else if (ch == 92 /* '\\\\' */) escaped = true;\n  }\n  return null;\n}\nfunction parseLinkLabel(text, start, offset, requireNonWS) {\n  for (let escaped = false, pos = start + 1, end = Math.min(text.length, pos + 999); pos < end; pos++) {\n    let ch = text.charCodeAt(pos);\n    if (escaped) escaped = false;else if (ch == 93 /* ']' */) return requireNonWS ? false : elt(Type.LinkLabel, start + offset, pos + 1 + offset);else {\n      if (requireNonWS && !space(ch)) requireNonWS = false;\n      if (ch == 91 /* '[' */) return false;else if (ch == 92 /* '\\\\' */) escaped = true;\n    }\n  }\n  return null;\n}\n/// Inline parsing functions get access to this context, and use it to\n/// read the content and emit syntax nodes.\nclass InlineContext {\n  /// @internal\n  constructor(\n  /// The parser that is being used.\n  parser,\n  /// The text of this inline section.\n  text,\n  /// The starting offset of the section in the document.\n  offset) {\n    this.parser = parser;\n    this.text = text;\n    this.offset = offset;\n    /// @internal\n    this.parts = [];\n  }\n  /// Get the character code at the given (document-relative)\n  /// position.\n  char(pos) {\n    return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset);\n  }\n  /// The position of the end of this inline section.\n  get end() {\n    return this.offset + this.text.length;\n  }\n  /// Get a substring of this inline section. Again uses\n  /// document-relative positions.\n  slice(from, to) {\n    return this.text.slice(from - this.offset, to - this.offset);\n  }\n  /// @internal\n  append(elt) {\n    this.parts.push(elt);\n    return elt.to;\n  }\n  /// Add a [delimiter](#DelimiterType) at this given position. `open`\n  /// and `close` indicate whether this delimiter is opening, closing,\n  /// or both. Returns the end of the delimiter, for convenient\n  /// returning from [parse functions](#InlineParser.parse).\n  addDelimiter(type, from, to, open, close) {\n    return this.append(new InlineDelimiter(type, from, to, (open ? 1 /* Mark.Open */ : 0 /* Mark.None */) | (close ? 2 /* Mark.Close */ : 0 /* Mark.None */)));\n  }\n  /// Add an inline element. Returns the end of the element.\n  addElement(elt) {\n    return this.append(elt);\n  }\n  /// Resolve markers between this.parts.length and from, wrapping matched markers in the\n  /// appropriate node and updating the content of this.parts. @internal\n  resolveMarkers(from) {\n    // Scan forward, looking for closing tokens\n    for (let i = from; i < this.parts.length; i++) {\n      let close = this.parts[i];\n      if (!(close instanceof InlineDelimiter && close.type.resolve && close.side & 2 /* Mark.Close */)) continue;\n      let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;\n      let closeSize = close.to - close.from;\n      let open,\n        j = i - 1;\n      // Continue scanning for a matching opening token\n      for (; j >= from; j--) {\n        let part = this.parts[j];\n        if (part instanceof InlineDelimiter && part.side & 1 /* Mark.Open */ && part.type == close.type &&\n        // Ignore emphasis delimiters where the character count doesn't match\n        !(emp && (close.side & 1 /* Mark.Open */ || part.side & 2 /* Mark.Close */) && (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))) {\n          open = part;\n          break;\n        }\n      }\n      if (!open) continue;\n      let type = close.type.resolve,\n        content = [];\n      let start = open.from,\n        end = close.to;\n      // Emphasis marker effect depends on the character count. Size consumed is minimum of the two\n      // markers.\n      if (emp) {\n        let size = Math.min(2, open.to - open.from, closeSize);\n        start = open.to - size;\n        end = close.from + size;\n        type = size == 1 ? \"Emphasis\" : \"StrongEmphasis\";\n      }\n      // Move the covered region into content, optionally adding marker nodes\n      if (open.type.mark) content.push(this.elt(open.type.mark, start, open.to));\n      for (let k = j + 1; k < i; k++) {\n        if (this.parts[k] instanceof Element) content.push(this.parts[k]);\n        this.parts[k] = null;\n      }\n      if (close.type.mark) content.push(this.elt(close.type.mark, close.from, end));\n      let element = this.elt(type, start, end, content);\n      // If there are leftover emphasis marker characters, shrink the close/open markers. Otherwise, clear them.\n      this.parts[j] = emp && open.from != start ? new InlineDelimiter(open.type, open.from, start, open.side) : null;\n      let keep = this.parts[i] = emp && close.to != end ? new InlineDelimiter(close.type, end, close.to, close.side) : null;\n      // Insert the new element in this.parts\n      if (keep) this.parts.splice(i, 0, element);else this.parts[i] = element;\n    }\n    // Collect the elements remaining in this.parts into an array.\n    let result = [];\n    for (let i = from; i < this.parts.length; i++) {\n      let part = this.parts[i];\n      if (part instanceof Element) result.push(part);\n    }\n    return result;\n  }\n  /// Find an opening delimiter of the given type. Returns `null` if\n  /// no delimiter is found, or an index that can be passed to\n  /// [`takeContent`](#InlineContext.takeContent) otherwise.\n  findOpeningDelimiter(type) {\n    for (let i = this.parts.length - 1; i >= 0; i--) {\n      let part = this.parts[i];\n      if (part instanceof InlineDelimiter && part.type == type) return i;\n    }\n    return null;\n  }\n  /// Remove all inline elements and delimiters starting from the\n  /// given index (which you should get from\n  /// [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),\n  /// resolve delimiters inside of them, and return them as an array\n  /// of elements.\n  takeContent(startIndex) {\n    let content = this.resolveMarkers(startIndex);\n    this.parts.length = startIndex;\n    return content;\n  }\n  /// Skip space after the given (document) position, returning either\n  /// the position of the next non-space character or the end of the\n  /// section.\n  skipSpace(from) {\n    return skipSpace(this.text, from - this.offset) + this.offset;\n  }\n  elt(type, from, to, children) {\n    if (typeof type == \"string\") return elt(this.parser.getNodeType(type), from, to, children);\n    return new TreeElement(type, from);\n  }\n}\nfunction injectMarks(elements, marks) {\n  if (!marks.length) return elements;\n  if (!elements.length) return marks;\n  let elts = elements.slice(),\n    eI = 0;\n  for (let mark of marks) {\n    while (eI < elts.length && elts[eI].to < mark.to) eI++;\n    if (eI < elts.length && elts[eI].from < mark.from) {\n      let e = elts[eI];\n      if (e instanceof Element) elts[eI] = new Element(e.type, e.from, e.to, injectMarks(e.children, [mark]));\n    } else {\n      elts.splice(eI++, 0, mark);\n    }\n  }\n  return elts;\n}\n// These are blocks that can span blank lines, and should thus only be\n// reused if their next sibling is also being reused.\nconst NotLast = [Type.CodeBlock, Type.ListItem, Type.OrderedList, Type.BulletList];\nclass FragmentCursor {\n  constructor(fragments, input) {\n    this.fragments = fragments;\n    this.input = input;\n    // Index into fragment array\n    this.i = 0;\n    // Active fragment\n    this.fragment = null;\n    this.fragmentEnd = -1;\n    // Cursor into the current fragment, if any. When `moveTo` returns\n    // true, this points at the first block after `pos`.\n    this.cursor = null;\n    if (fragments.length) this.fragment = fragments[this.i++];\n  }\n  nextFragment() {\n    this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;\n    this.cursor = null;\n    this.fragmentEnd = -1;\n  }\n  moveTo(pos, lineStart) {\n    while (this.fragment && this.fragment.to <= pos) this.nextFragment();\n    if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0)) return false;\n    if (this.fragmentEnd < 0) {\n      let end = this.fragment.to;\n      while (end > 0 && this.input.read(end - 1, end) != \"\\n\") end--;\n      this.fragmentEnd = end ? end - 1 : 0;\n    }\n    let c = this.cursor;\n    if (!c) {\n      c = this.cursor = this.fragment.tree.cursor();\n      c.firstChild();\n    }\n    let rPos = pos + this.fragment.offset;\n    while (c.to <= rPos) if (!c.parent()) return false;\n    for (;;) {\n      if (c.from >= rPos) return this.fragment.from <= lineStart;\n      if (!c.childAfter(rPos)) return false;\n    }\n  }\n  matches(hash) {\n    let tree = this.cursor.tree;\n    return tree && tree.prop(NodeProp.contextHash) == hash;\n  }\n  takeNodes(cx) {\n    let cur = this.cursor,\n      off = this.fragment.offset,\n      fragEnd = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0);\n    let start = cx.absoluteLineStart,\n      end = start,\n      blockI = cx.block.children.length;\n    let prevEnd = end,\n      prevI = blockI;\n    for (;;) {\n      if (cur.to - off > fragEnd) {\n        if (cur.type.isAnonymous && cur.firstChild()) continue;\n        break;\n      }\n      let pos = toRelative(cur.from - off, cx.ranges);\n      if (cur.to - off <= cx.ranges[cx.rangeI].to) {\n        // Fits in current range\n        cx.addNode(cur.tree, pos);\n      } else {\n        let dummy = new Tree(cx.parser.nodeSet.types[Type.Paragraph], [], [], 0, cx.block.hashProp);\n        cx.reusePlaceholders.set(dummy, cur.tree);\n        cx.addNode(dummy, pos);\n      }\n      // Taken content must always end in a block, because incremental\n      // parsing happens on block boundaries. Never stop directly\n      // after an indented code block, since those can continue after\n      // any number of blank lines.\n      if (cur.type.is(\"Block\")) {\n        if (NotLast.indexOf(cur.type.id) < 0) {\n          end = cur.to - off;\n          blockI = cx.block.children.length;\n        } else {\n          end = prevEnd;\n          blockI = prevI;\n          prevEnd = cur.to - off;\n          prevI = cx.block.children.length;\n        }\n      }\n      if (!cur.nextSibling()) break;\n    }\n    while (cx.block.children.length > blockI) {\n      cx.block.children.pop();\n      cx.block.positions.pop();\n    }\n    return end - start;\n  }\n}\n// Convert an input-stream-relative position to a\n// Markdown-doc-relative position by subtracting the size of all input\n// gaps before `abs`.\nfunction toRelative(abs, ranges) {\n  let pos = abs;\n  for (let i = 1; i < ranges.length; i++) {\n    let gapFrom = ranges[i - 1].to,\n      gapTo = ranges[i].from;\n    if (gapFrom < abs) pos -= gapTo - gapFrom;\n  }\n  return pos;\n}\nconst markdownHighlighting = styleTags({\n  \"Blockquote/...\": tags.quote,\n  HorizontalRule: tags.contentSeparator,\n  \"ATXHeading1/... SetextHeading1/...\": tags.heading1,\n  \"ATXHeading2/... SetextHeading2/...\": tags.heading2,\n  \"ATXHeading3/...\": tags.heading3,\n  \"ATXHeading4/...\": tags.heading4,\n  \"ATXHeading5/...\": tags.heading5,\n  \"ATXHeading6/...\": tags.heading6,\n  \"Comment CommentBlock\": tags.comment,\n  Escape: tags.escape,\n  Entity: tags.character,\n  \"Emphasis/...\": tags.emphasis,\n  \"StrongEmphasis/...\": tags.strong,\n  \"Link/... Image/...\": tags.link,\n  \"OrderedList/... BulletList/...\": tags.list,\n  \"BlockQuote/...\": tags.quote,\n  \"InlineCode CodeText\": tags.monospace,\n  \"URL Autolink\": tags.url,\n  \"HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark\": tags.processingInstruction,\n  \"CodeInfo LinkLabel\": tags.labelName,\n  LinkTitle: tags.string,\n  Paragraph: tags.content\n});\n/// The default CommonMark parser.\nconst parser = new MarkdownParser(new NodeSet(nodeTypes).extend(markdownHighlighting), Object.keys(DefaultBlockParsers).map(n => DefaultBlockParsers[n]), Object.keys(DefaultBlockParsers).map(n => DefaultLeafBlocks[n]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map(n => DefaultInline[n]), Object.keys(DefaultInline), []);\nfunction leftOverSpace(node, from, to) {\n  let ranges = [];\n  for (let n = node.firstChild, pos = from;; n = n.nextSibling) {\n    let nextPos = n ? n.from : to;\n    if (nextPos > pos) ranges.push({\n      from: pos,\n      to: nextPos\n    });\n    if (!n) break;\n    pos = n.to;\n  }\n  return ranges;\n}\n/// Create a Markdown extension to enable nested parsing on code\n/// blocks and/or embedded HTML.\nfunction parseCode(config) {\n  let {\n    codeParser,\n    htmlParser\n  } = config;\n  let wrap = parseMixed((node, input) => {\n    let id = node.type.id;\n    if (codeParser && (id == Type.CodeBlock || id == Type.FencedCode)) {\n      let info = \"\";\n      if (id == Type.FencedCode) {\n        let infoNode = node.node.getChild(Type.CodeInfo);\n        if (infoNode) info = input.read(infoNode.from, infoNode.to);\n      }\n      let parser = codeParser(info);\n      if (parser) return {\n        parser,\n        overlay: node => node.type.id == Type.CodeText\n      };\n    } else if (htmlParser && (id == Type.HTMLBlock || id == Type.HTMLTag)) {\n      return {\n        parser: htmlParser,\n        overlay: leftOverSpace(node.node, node.from, node.to)\n      };\n    }\n    return null;\n  });\n  return {\n    wrap\n  };\n}\nconst StrikethroughDelim = {\n  resolve: \"Strikethrough\",\n  mark: \"StrikethroughMark\"\n};\n/// An extension that implements\n/// [GFM-style](https://github.github.com/gfm/#strikethrough-extension-)\n/// Strikethrough syntax using `~~` delimiters.\nconst Strikethrough = {\n  defineNodes: [{\n    name: \"Strikethrough\",\n    style: {\n      \"Strikethrough/...\": tags.strikethrough\n    }\n  }, {\n    name: \"StrikethroughMark\",\n    style: tags.processingInstruction\n  }],\n  parseInline: [{\n    name: \"Strikethrough\",\n    parse(cx, next, pos) {\n      if (next != 126 /* '~' */ || cx.char(pos + 1) != 126 || cx.char(pos + 2) == 126) return -1;\n      let before = cx.slice(pos - 1, pos),\n        after = cx.slice(pos + 2, pos + 3);\n      let sBefore = /\\s|^$/.test(before),\n        sAfter = /\\s|^$/.test(after);\n      let pBefore = Punctuation.test(before),\n        pAfter = Punctuation.test(after);\n      return cx.addDelimiter(StrikethroughDelim, pos, pos + 2, !sAfter && (!pAfter || sBefore || pBefore), !sBefore && (!pBefore || sAfter || pAfter));\n    },\n    after: \"Emphasis\"\n  }]\n};\nfunction parseRow(cx, line, startI = 0, elts, offset = 0) {\n  let count = 0,\n    first = true,\n    cellStart = -1,\n    cellEnd = -1,\n    esc = false;\n  let parseCell = () => {\n    elts.push(cx.elt(\"TableCell\", offset + cellStart, offset + cellEnd, cx.parser.parseInline(line.slice(cellStart, cellEnd), offset + cellStart)));\n  };\n  for (let i = startI; i < line.length; i++) {\n    let next = line.charCodeAt(i);\n    if (next == 124 /* '|' */ && !esc) {\n      if (!first || cellStart > -1) count++;\n      first = false;\n      if (elts) {\n        if (cellStart > -1) parseCell();\n        elts.push(cx.elt(\"TableDelimiter\", i + offset, i + offset + 1));\n      }\n      cellStart = cellEnd = -1;\n    } else if (esc || next != 32 && next != 9) {\n      if (cellStart < 0) cellStart = i;\n      cellEnd = i + 1;\n    }\n    esc = !esc && next == 92;\n  }\n  if (cellStart > -1) {\n    count++;\n    if (elts) parseCell();\n  }\n  return count;\n}\nfunction hasPipe(str, start) {\n  for (let i = start; i < str.length; i++) {\n    let next = str.charCodeAt(i);\n    if (next == 124 /* '|' */) return true;\n    if (next == 92 /* '\\\\' */) i++;\n  }\n  return false;\n}\nconst delimiterLine = /^\\|?(\\s*:?-+:?\\s*\\|)+(\\s*:?-+:?\\s*)?$/;\nclass TableParser {\n  constructor() {\n    // Null means we haven't seen the second line yet, false means this\n    // isn't a table, and an array means this is a table and we've\n    // parsed the given rows so far.\n    this.rows = null;\n  }\n  nextLine(cx, line, leaf) {\n    if (this.rows == null) {\n      // Second line\n      this.rows = false;\n      let lineText;\n      if ((line.next == 45 || line.next == 58 || line.next == 124 /* '-:|' */) && delimiterLine.test(lineText = line.text.slice(line.pos))) {\n        let firstRow = [],\n          firstCount = parseRow(cx, leaf.content, 0, firstRow, leaf.start);\n        if (firstCount == parseRow(cx, lineText, line.pos)) this.rows = [cx.elt(\"TableHeader\", leaf.start, leaf.start + leaf.content.length, firstRow), cx.elt(\"TableDelimiter\", cx.lineStart + line.pos, cx.lineStart + line.text.length)];\n      }\n    } else if (this.rows) {\n      // Line after the second\n      let content = [];\n      parseRow(cx, line.text, line.pos, content, cx.lineStart);\n      this.rows.push(cx.elt(\"TableRow\", cx.lineStart + line.pos, cx.lineStart + line.text.length, content));\n    }\n    return false;\n  }\n  finish(cx, leaf) {\n    if (!this.rows) return false;\n    cx.addLeafElement(leaf, cx.elt(\"Table\", leaf.start, leaf.start + leaf.content.length, this.rows));\n    return true;\n  }\n}\n/// This extension provides\n/// [GFM-style](https://github.github.com/gfm/#tables-extension-)\n/// tables, using syntax like this:\n///\n/// ```\n/// | head 1 | head 2 |\n/// | ---    | ---    |\n/// | cell 1 | cell 2 |\n/// ```\nconst Table = {\n  defineNodes: [{\n    name: \"Table\",\n    block: true\n  }, {\n    name: \"TableHeader\",\n    style: {\n      \"TableHeader/...\": tags.heading\n    }\n  }, \"TableRow\", {\n    name: \"TableCell\",\n    style: tags.content\n  }, {\n    name: \"TableDelimiter\",\n    style: tags.processingInstruction\n  }],\n  parseBlock: [{\n    name: \"Table\",\n    leaf(_, leaf) {\n      return hasPipe(leaf.content, 0) ? new TableParser() : null;\n    },\n    endLeaf(cx, line, leaf) {\n      if (leaf.parsers.some(p => p instanceof TableParser) || !hasPipe(line.text, line.basePos)) return false;\n      let next = cx.scanLine(cx.absoluteLineEnd + 1).text;\n      return delimiterLine.test(next) && parseRow(cx, line.text, line.basePos) == parseRow(cx, next, line.basePos);\n    },\n    before: \"SetextHeading\"\n  }]\n};\nclass TaskParser {\n  nextLine() {\n    return false;\n  }\n  finish(cx, leaf) {\n    cx.addLeafElement(leaf, cx.elt(\"Task\", leaf.start, leaf.start + leaf.content.length, [cx.elt(\"TaskMarker\", leaf.start, leaf.start + 3), ...cx.parser.parseInline(leaf.content.slice(3), leaf.start + 3)]));\n    return true;\n  }\n}\n/// Extension providing\n/// [GFM-style](https://github.github.com/gfm/#task-list-items-extension-)\n/// task list items, where list items can be prefixed with `[ ]` or\n/// `[x]` to add a checkbox.\nconst TaskList = {\n  defineNodes: [{\n    name: \"Task\",\n    block: true,\n    style: tags.list\n  }, {\n    name: \"TaskMarker\",\n    style: tags.atom\n  }],\n  parseBlock: [{\n    name: \"TaskList\",\n    leaf(cx, leaf) {\n      return /^\\[[ xX]\\][ \\t]/.test(leaf.content) && cx.parentType().name == \"ListItem\" ? new TaskParser() : null;\n    },\n    after: \"SetextHeading\"\n  }]\n};\nconst autolinkRE = /(www\\.)|(https?:\\/\\/)|([\\w.+-]+@)|(mailto:|xmpp:)/gy;\nconst urlRE = /[\\w-]+(\\.[\\w-]+)+(\\/[^\\s<]*)?/gy;\nconst lastTwoDomainWords = /[\\w-]+\\.[\\w-]+($|\\/)/;\nconst emailRE = /[\\w.+-]+@[\\w-]+(\\.[\\w.-]+)+/gy;\nconst xmppResourceRE = /\\/[a-zA-Z\\d@.]+/gy;\nfunction count(str, from, to, ch) {\n  let result = 0;\n  for (let i = from; i < to; i++) if (str[i] == ch) result++;\n  return result;\n}\nfunction autolinkURLEnd(text, from) {\n  urlRE.lastIndex = from;\n  let m = urlRE.exec(text);\n  if (!m || lastTwoDomainWords.exec(m[0])[0].indexOf(\"_\") > -1) return -1;\n  let end = from + m[0].length;\n  for (;;) {\n    let last = text[end - 1],\n      m;\n    if (/[?!.,:*_~]/.test(last) || last == \")\" && count(text, from, end, \")\") > count(text, from, end, \"(\")) end--;else if (last == \";\" && (m = /&(?:#\\d+|#x[a-f\\d]+|\\w+);$/.exec(text.slice(from, end)))) end = from + m.index;else break;\n  }\n  return end;\n}\nfunction autolinkEmailEnd(text, from) {\n  emailRE.lastIndex = from;\n  let m = emailRE.exec(text);\n  if (!m) return -1;\n  let last = m[0][m[0].length - 1];\n  return last == \"_\" || last == \"-\" ? -1 : from + m[0].length - (last == \".\" ? 1 : 0);\n}\n/// Extension that implements autolinking for\n/// `www.`/`http://`/`https://`/`mailto:`/`xmpp:` URLs and email\n/// addresses.\nconst Autolink = {\n  parseInline: [{\n    name: \"Autolink\",\n    parse(cx, next, absPos) {\n      let pos = absPos - cx.offset;\n      autolinkRE.lastIndex = pos;\n      let m = autolinkRE.exec(cx.text),\n        end = -1;\n      if (!m) return -1;\n      if (m[1] || m[2]) {\n        // www., http://\n        end = autolinkURLEnd(cx.text, pos + m[0].length);\n      } else if (m[3]) {\n        // email address\n        end = autolinkEmailEnd(cx.text, pos);\n      } else {\n        // mailto:/xmpp:\n        end = autolinkEmailEnd(cx.text, pos + m[0].length);\n        if (end > -1 && m[0] == \"xmpp:\") {\n          xmppResourceRE.lastIndex = end;\n          m = xmppResourceRE.exec(cx.text);\n          if (m) end = m.index + m[0].length;\n        }\n      }\n      if (end < 0) return -1;\n      cx.addElement(cx.elt(\"URL\", absPos, end + cx.offset));\n      return end + cx.offset;\n    }\n  }]\n};\n/// Extension bundle containing [`Table`](#Table),\n/// [`TaskList`](#TaskList), [`Strikethrough`](#Strikethrough), and\n/// [`Autolink`](#Autolink).\nconst GFM = [Table, TaskList, Strikethrough, Autolink];\nfunction parseSubSuper(ch, node, mark) {\n  return (cx, next, pos) => {\n    if (next != ch || cx.char(pos + 1) == ch) return -1;\n    let elts = [cx.elt(mark, pos, pos + 1)];\n    for (let i = pos + 1; i < cx.end; i++) {\n      let next = cx.char(i);\n      if (next == ch) return cx.addElement(cx.elt(node, pos, i + 1, elts.concat(cx.elt(mark, i, i + 1))));\n      if (next == 92 /* '\\\\' */) elts.push(cx.elt(\"Escape\", i, i++ + 2));\n      if (space(next)) break;\n    }\n    return -1;\n  };\n}\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// superscript using `^` markers.\nconst Superscript = {\n  defineNodes: [{\n    name: \"Superscript\",\n    style: tags.special(tags.content)\n  }, {\n    name: \"SuperscriptMark\",\n    style: tags.processingInstruction\n  }],\n  parseInline: [{\n    name: \"Superscript\",\n    parse: parseSubSuper(94 /* '^' */, \"Superscript\", \"SuperscriptMark\")\n  }]\n};\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// subscript using `~` markers.\nconst Subscript = {\n  defineNodes: [{\n    name: \"Subscript\",\n    style: tags.special(tags.content)\n  }, {\n    name: \"SubscriptMark\",\n    style: tags.processingInstruction\n  }],\n  parseInline: [{\n    name: \"Subscript\",\n    parse: parseSubSuper(126 /* '~' */, \"Subscript\", \"SubscriptMark\")\n  }]\n};\n/// Extension that parses two colons with only letters, underscores,\n/// and numbers between them as `Emoji` nodes.\nconst Emoji = {\n  defineNodes: [{\n    name: \"Emoji\",\n    style: tags.character\n  }],\n  parseInline: [{\n    name: \"Emoji\",\n    parse(cx, next, pos) {\n      let match;\n      if (next != 58 /* ':' */ || !(match = /^[a-zA-Z_0-9]+:/.exec(cx.slice(pos + 1, cx.end)))) return -1;\n      return cx.addElement(cx.elt(\"Emoji\", pos, pos + 1 + match[0].length));\n    }\n  }]\n};\nexport { Autolink, BlockContext, Element, Emoji, GFM, InlineContext, LeafBlock, Line, MarkdownParser, Strikethrough, Subscript, Superscript, Table, TaskList, parseCode, parser };","map":{"version":3,"names":["NodeType","NodeProp","NodeSet","Tree","Parser","parseMixed","styleTags","tags","Tag","CompositeBlock","create","type","value","from","parentHash","end","hash","constructor","children","positions","hashProp","contextHash","addChild","child","pos","prop","length","push","toTree","nodeSet","last","Math","max","types","balance","makeTree","none","Type","LeafBlock","start","content","marks","parsers","Line","text","baseIndent","basePos","depth","markers","indent","next","forward","forwardInner","newPos","skipSpace","countIndent","charCodeAt","reset","pop","moveBase","to","moveBaseColumn","findColumn","addMarker","elt","i","goal","scrub","result","slice","skipForList","bl","cx","line","block","stack","size","OrderedList","isOrderedList","isBulletList","BulletList","isHorizontalRule","DefaultSkipMarkup","Blockquote","QuoteMark","lineStart","space","ListItem","_cx","Document","ch","skipSpaceBack","isFencedCode","isBlockquote","breaking","count","isSetextUnderline","inList","isAtxHeading","EmptyLine","CommentEnd","ProcessingEnd","HTMLBlockStyle","isHTMLBlock","rest","e","test","getListIndent","indentAfter","indented","addCodeText","CodeText","DefaultBlockParsers","LinkReference","undefined","IndentedCode","base","pendingMarks","nextLine","m","codeStart","filter","concat","addNode","buffer","writeElements","finish","CodeBlock","FencedCode","fenceEnd","len","infoFrom","infoTo","CodeMark","CodeInfo","first","textStart","textEnd","prevLineEnd","startContext","HorizontalRule","newBase","ListMark","ATXHeading","off","endOfSpace","after","buf","write","HeaderMark","parser","parseInline","node","ATXHeading1","HTMLBlock","trailing","nodeType","CommentBlock","ProcessingInstructionBlock","SetextHeading","LinkReferenceParser","leaf","stage","elts","advance","complete","addLeafElement","nextStage","parseLinkLabel","LinkMark","parseURL","skip","title","parseLinkTitle","titleEnd","lineEnd","SetextHeadingParser","underline","underlineMark","SetextHeading1","SetextHeading2","DefaultLeafBlocks","_","DefaultEndLeaf","p","scanLineResult","BlockContext","input","fragments","ranges","atEnd","reusePlaceholders","Map","stoppedAt","rangeI","absoluteLineStart","absoluteLineEnd","FragmentCursor","readLine","parsedPos","markI","mark","finishContext","reuseFragment","blockParsers","parse","leafBlockParsers","lines","stop","endLeafBlock","finishLeaf","stopAt","RangeError","moveTo","matches","taken","takeNodes","toRelative","moveRangeI","parentType","scanLine","r","lineChunkAt","textOffset","nextFrom","handler","skipContextMarkup","Error","chunk","lineChunks","eol","indexOf","startComposite","getNodeType","addElement","injectMarks","top","addGaps","tree","injectGaps","topNode","inline","Paragraph","TreeElement","Buffer","offset","dummies","rangeEnd","movePastNext","upto","inclusive","firstChild","nextSibling","reuse","get","propValues","MarkdownParser","blockNames","inlineParsers","inlineNames","wrappers","nodeTypes","Object","t","name","id","createParse","w","configure","spec","config","resolveConfig","nonEmpty","defineNodes","assign","styles","s","composite","style","some","group","define","props","Array","isArray","extend","remove","rm","parseBlock","found","before","findName","splice","endLeaf","wrap","InlineContext","outer","char","token","resolveMarkers","a","conf","conc","b","wrapA","wrapB","inner","names","Escape","nodes","writeTo","build","reused","topID","Element","startOff","EmphasisUnderscore","resolve","EmphasisAsterisk","LinkStart","ImageStart","InlineDelimiter","side","Escapable","Punctuation","RegExp","DefaultInline","escaped","append","Entity","exec","InlineCode","curSize","HTMLTag","url","Autolink","URL","comment","Comment","procInst","ProcessingInstruction","Emphasis","pBefore","pAfter","sBefore","sAfter","leftFlanking","rightFlanking","canOpen","canClose","HardBreak","Link","Image","LinkEnd","parts","part","takeContent","link","finishLink","j","startPos","endPos","unshift","dest","label","LinkTitle","requireNonWS","min","LinkLabel","addDelimiter","open","close","emp","closeSize","k","element","keep","findOpeningDelimiter","startIndex","elements","eI","NotLast","fragment","fragmentEnd","cursor","nextFragment","read","c","rPos","parent","childAfter","cur","fragEnd","openEnd","blockI","prevEnd","prevI","isAnonymous","dummy","set","is","abs","gapFrom","gapTo","markdownHighlighting","quote","contentSeparator","heading1","heading2","heading3","heading4","heading5","heading6","escape","character","emphasis","strong","list","monospace","processingInstruction","labelName","string","keys","map","n","leftOverSpace","nextPos","parseCode","codeParser","htmlParser","info","infoNode","getChild","overlay","StrikethroughDelim","Strikethrough","strikethrough","parseRow","startI","cellStart","cellEnd","esc","parseCell","hasPipe","str","delimiterLine","TableParser","rows","lineText","firstRow","firstCount","Table","heading","TaskParser","TaskList","atom","autolinkRE","urlRE","lastTwoDomainWords","emailRE","xmppResourceRE","autolinkURLEnd","lastIndex","index","autolinkEmailEnd","absPos","GFM","parseSubSuper","Superscript","special","Subscript","Emoji","match"],"sources":["/Users/Shivaji/Workspace/Play/cta/ui/node_modules/@lezer/markdown/dist/index.js"],"sourcesContent":["import { NodeType, NodeProp, NodeSet, Tree, Parser, parseMixed } from '@lezer/common';\nimport { styleTags, tags, Tag } from '@lezer/highlight';\n\nclass CompositeBlock {\n    static create(type, value, from, parentHash, end) {\n        let hash = (parentHash + (parentHash << 8) + type + (value << 4)) | 0;\n        return new CompositeBlock(type, value, from, hash, end, [], []);\n    }\n    constructor(type, \n    // Used for indentation in list items, markup character in lists\n    value, from, hash, end, children, positions) {\n        this.type = type;\n        this.value = value;\n        this.from = from;\n        this.hash = hash;\n        this.end = end;\n        this.children = children;\n        this.positions = positions;\n        this.hashProp = [[NodeProp.contextHash, hash]];\n    }\n    addChild(child, pos) {\n        if (child.prop(NodeProp.contextHash) != this.hash)\n            child = new Tree(child.type, child.children, child.positions, child.length, this.hashProp);\n        this.children.push(child);\n        this.positions.push(pos);\n    }\n    toTree(nodeSet, end = this.end) {\n        let last = this.children.length - 1;\n        if (last >= 0)\n            end = Math.max(end, this.positions[last] + this.children[last].length + this.from);\n        return new Tree(nodeSet.types[this.type], this.children, this.positions, end - this.from).balance({\n            makeTree: (children, positions, length) => new Tree(NodeType.none, children, positions, length, this.hashProp)\n        });\n    }\n}\nvar Type;\n(function (Type) {\n    Type[Type[\"Document\"] = 1] = \"Document\";\n    Type[Type[\"CodeBlock\"] = 2] = \"CodeBlock\";\n    Type[Type[\"FencedCode\"] = 3] = \"FencedCode\";\n    Type[Type[\"Blockquote\"] = 4] = \"Blockquote\";\n    Type[Type[\"HorizontalRule\"] = 5] = \"HorizontalRule\";\n    Type[Type[\"BulletList\"] = 6] = \"BulletList\";\n    Type[Type[\"OrderedList\"] = 7] = \"OrderedList\";\n    Type[Type[\"ListItem\"] = 8] = \"ListItem\";\n    Type[Type[\"ATXHeading1\"] = 9] = \"ATXHeading1\";\n    Type[Type[\"ATXHeading2\"] = 10] = \"ATXHeading2\";\n    Type[Type[\"ATXHeading3\"] = 11] = \"ATXHeading3\";\n    Type[Type[\"ATXHeading4\"] = 12] = \"ATXHeading4\";\n    Type[Type[\"ATXHeading5\"] = 13] = \"ATXHeading5\";\n    Type[Type[\"ATXHeading6\"] = 14] = \"ATXHeading6\";\n    Type[Type[\"SetextHeading1\"] = 15] = \"SetextHeading1\";\n    Type[Type[\"SetextHeading2\"] = 16] = \"SetextHeading2\";\n    Type[Type[\"HTMLBlock\"] = 17] = \"HTMLBlock\";\n    Type[Type[\"LinkReference\"] = 18] = \"LinkReference\";\n    Type[Type[\"Paragraph\"] = 19] = \"Paragraph\";\n    Type[Type[\"CommentBlock\"] = 20] = \"CommentBlock\";\n    Type[Type[\"ProcessingInstructionBlock\"] = 21] = \"ProcessingInstructionBlock\";\n    // Inline\n    Type[Type[\"Escape\"] = 22] = \"Escape\";\n    Type[Type[\"Entity\"] = 23] = \"Entity\";\n    Type[Type[\"HardBreak\"] = 24] = \"HardBreak\";\n    Type[Type[\"Emphasis\"] = 25] = \"Emphasis\";\n    Type[Type[\"StrongEmphasis\"] = 26] = \"StrongEmphasis\";\n    Type[Type[\"Link\"] = 27] = \"Link\";\n    Type[Type[\"Image\"] = 28] = \"Image\";\n    Type[Type[\"InlineCode\"] = 29] = \"InlineCode\";\n    Type[Type[\"HTMLTag\"] = 30] = \"HTMLTag\";\n    Type[Type[\"Comment\"] = 31] = \"Comment\";\n    Type[Type[\"ProcessingInstruction\"] = 32] = \"ProcessingInstruction\";\n    Type[Type[\"Autolink\"] = 33] = \"Autolink\";\n    // Smaller tokens\n    Type[Type[\"HeaderMark\"] = 34] = \"HeaderMark\";\n    Type[Type[\"QuoteMark\"] = 35] = \"QuoteMark\";\n    Type[Type[\"ListMark\"] = 36] = \"ListMark\";\n    Type[Type[\"LinkMark\"] = 37] = \"LinkMark\";\n    Type[Type[\"EmphasisMark\"] = 38] = \"EmphasisMark\";\n    Type[Type[\"CodeMark\"] = 39] = \"CodeMark\";\n    Type[Type[\"CodeText\"] = 40] = \"CodeText\";\n    Type[Type[\"CodeInfo\"] = 41] = \"CodeInfo\";\n    Type[Type[\"LinkTitle\"] = 42] = \"LinkTitle\";\n    Type[Type[\"LinkLabel\"] = 43] = \"LinkLabel\";\n    Type[Type[\"URL\"] = 44] = \"URL\";\n})(Type || (Type = {}));\n/// Data structure used to accumulate a block's content during [leaf\n/// block parsing](#BlockParser.leaf).\nclass LeafBlock {\n    /// @internal\n    constructor(\n    /// The start position of the block.\n    start, \n    /// The block's text content.\n    content) {\n        this.start = start;\n        this.content = content;\n        /// @internal\n        this.marks = [];\n        /// The block parsers active for this block.\n        this.parsers = [];\n    }\n}\n/// Data structure used during block-level per-line parsing.\nclass Line {\n    constructor() {\n        /// The line's full text.\n        this.text = \"\";\n        /// The base indent provided by the composite contexts (that have\n        /// been handled so far).\n        this.baseIndent = 0;\n        /// The string position corresponding to the base indent.\n        this.basePos = 0;\n        /// The number of contexts handled @internal\n        this.depth = 0;\n        /// Any markers (i.e. block quote markers) parsed for the contexts. @internal\n        this.markers = [];\n        /// The position of the next non-whitespace character beyond any\n        /// list, blockquote, or other composite block markers.\n        this.pos = 0;\n        /// The column of the next non-whitespace character.\n        this.indent = 0;\n        /// The character code of the character after `pos`.\n        this.next = -1;\n    }\n    /// @internal\n    forward() {\n        if (this.basePos > this.pos)\n            this.forwardInner();\n    }\n    /// @internal\n    forwardInner() {\n        let newPos = this.skipSpace(this.basePos);\n        this.indent = this.countIndent(newPos, this.pos, this.indent);\n        this.pos = newPos;\n        this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);\n    }\n    /// Skip whitespace after the given position, return the position of\n    /// the next non-space character or the end of the line if there's\n    /// only space after `from`.\n    skipSpace(from) { return skipSpace(this.text, from); }\n    /// @internal\n    reset(text) {\n        this.text = text;\n        this.baseIndent = this.basePos = this.pos = this.indent = 0;\n        this.forwardInner();\n        this.depth = 1;\n        while (this.markers.length)\n            this.markers.pop();\n    }\n    /// Move the line's base position forward to the given position.\n    /// This should only be called by composite [block\n    /// parsers](#BlockParser.parse) or [markup skipping\n    /// functions](#NodeSpec.composite).\n    moveBase(to) {\n        this.basePos = to;\n        this.baseIndent = this.countIndent(to, this.pos, this.indent);\n    }\n    /// Move the line's base position forward to the given _column_.\n    moveBaseColumn(indent) {\n        this.baseIndent = indent;\n        this.basePos = this.findColumn(indent);\n    }\n    /// Store a composite-block-level marker. Should be called from\n    /// [markup skipping functions](#NodeSpec.composite) when they\n    /// consume any non-whitespace characters.\n    addMarker(elt) {\n        this.markers.push(elt);\n    }\n    /// Find the column position at `to`, optionally starting at a given\n    /// position and column.\n    countIndent(to, from = 0, indent = 0) {\n        for (let i = from; i < to; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return indent;\n    }\n    /// Find the position corresponding to the given column.\n    findColumn(goal) {\n        let i = 0;\n        for (let indent = 0; i < this.text.length && indent < goal; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return i;\n    }\n    /// @internal\n    scrub() {\n        if (!this.baseIndent)\n            return this.text;\n        let result = \"\";\n        for (let i = 0; i < this.basePos; i++)\n            result += \" \";\n        return result + this.text.slice(this.basePos);\n    }\n}\nfunction skipForList(bl, cx, line) {\n    if (line.pos == line.text.length ||\n        (bl != cx.block && line.indent >= cx.stack[line.depth + 1].value + line.baseIndent))\n        return true;\n    if (line.indent >= line.baseIndent + 4)\n        return false;\n    let size = (bl.type == Type.OrderedList ? isOrderedList : isBulletList)(line, cx, false);\n    return size > 0 &&\n        (bl.type != Type.BulletList || isHorizontalRule(line, cx, false) < 0) &&\n        line.text.charCodeAt(line.pos + size - 1) == bl.value;\n}\nconst DefaultSkipMarkup = {\n    [Type.Blockquote](bl, cx, line) {\n        if (line.next != 62 /* '>' */)\n            return false;\n        line.markers.push(elt(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1));\n        line.moveBase(line.pos + (space(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));\n        bl.end = cx.lineStart + line.text.length;\n        return true;\n    },\n    [Type.ListItem](bl, _cx, line) {\n        if (line.indent < line.baseIndent + bl.value && line.next > -1)\n            return false;\n        line.moveBaseColumn(line.baseIndent + bl.value);\n        return true;\n    },\n    [Type.OrderedList]: skipForList,\n    [Type.BulletList]: skipForList,\n    [Type.Document]() { return true; }\n};\nfunction space(ch) { return ch == 32 || ch == 9 || ch == 10 || ch == 13; }\nfunction skipSpace(line, i = 0) {\n    while (i < line.length && space(line.charCodeAt(i)))\n        i++;\n    return i;\n}\nfunction skipSpaceBack(line, i, to) {\n    while (i > to && space(line.charCodeAt(i - 1)))\n        i--;\n    return i;\n}\nfunction isFencedCode(line) {\n    if (line.next != 96 && line.next != 126 /* '`~' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    if (pos < line.pos + 3)\n        return -1;\n    if (line.next == 96)\n        for (let i = pos; i < line.text.length; i++)\n            if (line.text.charCodeAt(i) == 96)\n                return -1;\n    return pos;\n}\nfunction isBlockquote(line) {\n    return line.next != 62 /* '>' */ ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;\n}\nfunction isHorizontalRule(line, cx, breaking) {\n    if (line.next != 42 && line.next != 45 && line.next != 95 /* '_-*' */)\n        return -1;\n    let count = 1;\n    for (let pos = line.pos + 1; pos < line.text.length; pos++) {\n        let ch = line.text.charCodeAt(pos);\n        if (ch == line.next)\n            count++;\n        else if (!space(ch))\n            return -1;\n    }\n    // Setext headers take precedence\n    if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx.stack.length)\n        return -1;\n    return count < 3 ? -1 : 1;\n}\nfunction inList(cx, type) {\n    for (let i = cx.stack.length - 1; i >= 0; i--)\n        if (cx.stack[i].type == type)\n            return true;\n    return false;\n}\nfunction isBulletList(line, cx, breaking) {\n    return (line.next == 45 || line.next == 43 || line.next == 42 /* '-+*' */) &&\n        (line.pos == line.text.length - 1 || space(line.text.charCodeAt(line.pos + 1))) &&\n        (!breaking || inList(cx, Type.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;\n}\nfunction isOrderedList(line, cx, breaking) {\n    let pos = line.pos, next = line.next;\n    for (;;) {\n        if (next >= 48 && next <= 57 /* '0-9' */)\n            pos++;\n        else\n            break;\n        if (pos == line.text.length)\n            return -1;\n        next = line.text.charCodeAt(pos);\n    }\n    if (pos == line.pos || pos > line.pos + 9 ||\n        (next != 46 && next != 41 /* '.)' */) ||\n        (pos < line.text.length - 1 && !space(line.text.charCodeAt(pos + 1))) ||\n        breaking && !inList(cx, Type.OrderedList) &&\n            (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49 /* '1' */))\n        return -1;\n    return pos + 1 - line.pos;\n}\nfunction isAtxHeading(line) {\n    if (line.next != 35 /* '#' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == 35)\n        pos++;\n    if (pos < line.text.length && line.text.charCodeAt(pos) != 32)\n        return -1;\n    let size = pos - line.pos;\n    return size > 6 ? -1 : size;\n}\nfunction isSetextUnderline(line) {\n    if (line.next != 45 && line.next != 61 /* '-=' */ || line.indent >= line.baseIndent + 4)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    let end = pos;\n    while (pos < line.text.length && space(line.text.charCodeAt(pos)))\n        pos++;\n    return pos == line.text.length ? end : -1;\n}\nconst EmptyLine = /^[ \\t]*$/, CommentEnd = /-->/, ProcessingEnd = /\\?>/;\nconst HTMLBlockStyle = [\n    [/^<(?:script|pre|style)(?:\\s|>|$)/i, /<\\/(?:script|pre|style)>/i],\n    [/^\\s*<!--/, CommentEnd],\n    [/^\\s*<\\?/, ProcessingEnd],\n    [/^\\s*<![A-Z]/, />/],\n    [/^\\s*<!\\[CDATA\\[/, /\\]\\]>/],\n    [/^\\s*<\\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\\s|\\/?>|$)/i, EmptyLine],\n    [/^\\s*(?:<\\/[a-z][\\w-]*\\s*>|<[a-z][\\w-]*(\\s+[a-z:_][\\w-.]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*>)\\s*$/i, EmptyLine]\n];\nfunction isHTMLBlock(line, _cx, breaking) {\n    if (line.next != 60 /* '<' */)\n        return -1;\n    let rest = line.text.slice(line.pos);\n    for (let i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++)\n        if (HTMLBlockStyle[i][0].test(rest))\n            return i;\n    return -1;\n}\nfunction getListIndent(line, pos) {\n    let indentAfter = line.countIndent(pos, line.pos, line.indent);\n    let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);\n    return indented >= indentAfter + 5 ? indentAfter + 1 : indented;\n}\nfunction addCodeText(marks, from, to) {\n    let last = marks.length - 1;\n    if (last >= 0 && marks[last].to == from && marks[last].type == Type.CodeText)\n        marks[last].to = to;\n    else\n        marks.push(elt(Type.CodeText, from, to));\n}\n// Rules for parsing blocks. A return value of false means the rule\n// doesn't apply here, true means it does. When true is returned and\n// `p.line` has been updated, the rule is assumed to have consumed a\n// leaf block. Otherwise, it is assumed to have opened a context.\nconst DefaultBlockParsers = {\n    LinkReference: undefined,\n    IndentedCode(cx, line) {\n        let base = line.baseIndent + 4;\n        if (line.indent < base)\n            return false;\n        let start = line.findColumn(base);\n        let from = cx.lineStart + start, to = cx.lineStart + line.text.length;\n        let marks = [], pendingMarks = [];\n        addCodeText(marks, from, to);\n        while (cx.nextLine() && line.depth >= cx.stack.length) {\n            if (line.pos == line.text.length) { // Empty\n                addCodeText(pendingMarks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    pendingMarks.push(m);\n            }\n            else if (line.indent < base) {\n                break;\n            }\n            else {\n                if (pendingMarks.length) {\n                    for (let m of pendingMarks) {\n                        if (m.type == Type.CodeText)\n                            addCodeText(marks, m.from, m.to);\n                        else\n                            marks.push(m);\n                    }\n                    pendingMarks = [];\n                }\n                addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                to = cx.lineStart + line.text.length;\n                let codeStart = cx.lineStart + line.findColumn(line.baseIndent + 4);\n                if (codeStart < to)\n                    addCodeText(marks, codeStart, to);\n            }\n        }\n        if (pendingMarks.length) {\n            pendingMarks = pendingMarks.filter(m => m.type != Type.CodeText);\n            if (pendingMarks.length)\n                line.markers = pendingMarks.concat(line.markers);\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type.CodeBlock, to - from), from);\n        return true;\n    },\n    FencedCode(cx, line) {\n        let fenceEnd = isFencedCode(line);\n        if (fenceEnd < 0)\n            return false;\n        let from = cx.lineStart + line.pos, ch = line.next, len = fenceEnd - line.pos;\n        let infoFrom = line.skipSpace(fenceEnd), infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);\n        let marks = [elt(Type.CodeMark, from, from + len)];\n        if (infoFrom < infoTo)\n            marks.push(elt(Type.CodeInfo, cx.lineStart + infoFrom, cx.lineStart + infoTo));\n        for (let first = true; cx.nextLine() && line.depth >= cx.stack.length; first = false) {\n            let i = line.pos;\n            if (line.indent - line.baseIndent < 4)\n                while (i < line.text.length && line.text.charCodeAt(i) == ch)\n                    i++;\n            if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {\n                for (let m of line.markers)\n                    marks.push(m);\n                marks.push(elt(Type.CodeMark, cx.lineStart + line.pos, cx.lineStart + i));\n                cx.nextLine();\n                break;\n            }\n            else {\n                if (!first)\n                    addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                let textStart = cx.lineStart + line.basePos, textEnd = cx.lineStart + line.text.length;\n                if (textStart < textEnd)\n                    addCodeText(marks, textStart, textEnd);\n            }\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from)\n            .finish(Type.FencedCode, cx.prevLineEnd() - from), from);\n        return true;\n    },\n    Blockquote(cx, line) {\n        let size = isBlockquote(line);\n        if (size < 0)\n            return false;\n        cx.startContext(Type.Blockquote, line.pos);\n        cx.addNode(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1);\n        line.moveBase(line.pos + size);\n        return null;\n    },\n    HorizontalRule(cx, line) {\n        if (isHorizontalRule(line, cx, false) < 0)\n            return false;\n        let from = cx.lineStart + line.pos;\n        cx.nextLine();\n        cx.addNode(Type.HorizontalRule, from);\n        return true;\n    },\n    BulletList(cx, line) {\n        let size = isBulletList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.BulletList)\n            cx.startContext(Type.BulletList, line.basePos, line.next);\n        let newBase = getListIndent(line, line.pos + 1);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    OrderedList(cx, line) {\n        let size = isOrderedList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.OrderedList)\n            cx.startContext(Type.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));\n        let newBase = getListIndent(line, line.pos + size);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    ATXHeading(cx, line) {\n        let size = isAtxHeading(line);\n        if (size < 0)\n            return false;\n        let off = line.pos, from = cx.lineStart + off;\n        let endOfSpace = skipSpaceBack(line.text, line.text.length, off), after = endOfSpace;\n        while (after > off && line.text.charCodeAt(after - 1) == line.next)\n            after--;\n        if (after == endOfSpace || after == off || !space(line.text.charCodeAt(after - 1)))\n            after = line.text.length;\n        let buf = cx.buffer\n            .write(Type.HeaderMark, 0, size)\n            .writeElements(cx.parser.parseInline(line.text.slice(off + size + 1, after), from + size + 1), -from);\n        if (after < line.text.length)\n            buf.write(Type.HeaderMark, after - off, endOfSpace - off);\n        let node = buf.finish(Type.ATXHeading1 - 1 + size, line.text.length - off);\n        cx.nextLine();\n        cx.addNode(node, from);\n        return true;\n    },\n    HTMLBlock(cx, line) {\n        let type = isHTMLBlock(line, cx, false);\n        if (type < 0)\n            return false;\n        let from = cx.lineStart + line.pos, end = HTMLBlockStyle[type][1];\n        let marks = [], trailing = end != EmptyLine;\n        while (!end.test(line.text) && cx.nextLine()) {\n            if (line.depth < cx.stack.length) {\n                trailing = false;\n                break;\n            }\n            for (let m of line.markers)\n                marks.push(m);\n        }\n        if (trailing)\n            cx.nextLine();\n        let nodeType = end == CommentEnd ? Type.CommentBlock : end == ProcessingEnd ? Type.ProcessingInstructionBlock : Type.HTMLBlock;\n        let to = cx.prevLineEnd();\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(nodeType, to - from), from);\n        return true;\n    },\n    SetextHeading: undefined // Specifies relative precedence for block-continue function\n};\n// This implements a state machine that incrementally parses link references. At each\n// next line, it looks ahead to see if the line continues the reference or not. If it\n// doesn't and a valid link is available ending before that line, it finishes that.\n// Similarly, on `finish` (when the leaf is terminated by external circumstances), it\n// creates a link reference if there's a valid reference up to the current point.\nclass LinkReferenceParser {\n    constructor(leaf) {\n        this.stage = 0 /* RefStage.Start */;\n        this.elts = [];\n        this.pos = 0;\n        this.start = leaf.start;\n        this.advance(leaf.content);\n    }\n    nextLine(cx, line, leaf) {\n        if (this.stage == -1 /* RefStage.Failed */)\n            return false;\n        let content = leaf.content + \"\\n\" + line.scrub();\n        let finish = this.advance(content);\n        if (finish > -1 && finish < content.length)\n            return this.complete(cx, leaf, finish);\n        return false;\n    }\n    finish(cx, leaf) {\n        if ((this.stage == 2 /* RefStage.Link */ || this.stage == 3 /* RefStage.Title */) && skipSpace(leaf.content, this.pos) == leaf.content.length)\n            return this.complete(cx, leaf, leaf.content.length);\n        return false;\n    }\n    complete(cx, leaf, len) {\n        cx.addLeafElement(leaf, elt(Type.LinkReference, this.start, this.start + len, this.elts));\n        return true;\n    }\n    nextStage(elt) {\n        if (elt) {\n            this.pos = elt.to - this.start;\n            this.elts.push(elt);\n            this.stage++;\n            return true;\n        }\n        if (elt === false)\n            this.stage = -1 /* RefStage.Failed */;\n        return false;\n    }\n    advance(content) {\n        for (;;) {\n            if (this.stage == -1 /* RefStage.Failed */) {\n                return -1;\n            }\n            else if (this.stage == 0 /* RefStage.Start */) {\n                if (!this.nextStage(parseLinkLabel(content, this.pos, this.start, true)))\n                    return -1;\n                if (content.charCodeAt(this.pos) != 58 /* ':' */)\n                    return this.stage = -1 /* RefStage.Failed */;\n                this.elts.push(elt(Type.LinkMark, this.pos + this.start, this.pos + this.start + 1));\n                this.pos++;\n            }\n            else if (this.stage == 1 /* RefStage.Label */) {\n                if (!this.nextStage(parseURL(content, skipSpace(content, this.pos), this.start)))\n                    return -1;\n            }\n            else if (this.stage == 2 /* RefStage.Link */) {\n                let skip = skipSpace(content, this.pos), end = 0;\n                if (skip > this.pos) {\n                    let title = parseLinkTitle(content, skip, this.start);\n                    if (title) {\n                        let titleEnd = lineEnd(content, title.to - this.start);\n                        if (titleEnd > 0) {\n                            this.nextStage(title);\n                            end = titleEnd;\n                        }\n                    }\n                }\n                if (!end)\n                    end = lineEnd(content, this.pos);\n                return end > 0 && end < content.length ? end : -1;\n            }\n            else { // RefStage.Title\n                return lineEnd(content, this.pos);\n            }\n        }\n    }\n}\nfunction lineEnd(text, pos) {\n    for (; pos < text.length; pos++) {\n        let next = text.charCodeAt(pos);\n        if (next == 10)\n            break;\n        if (!space(next))\n            return -1;\n    }\n    return pos;\n}\nclass SetextHeadingParser {\n    nextLine(cx, line, leaf) {\n        let underline = line.depth < cx.stack.length ? -1 : isSetextUnderline(line);\n        let next = line.next;\n        if (underline < 0)\n            return false;\n        let underlineMark = elt(Type.HeaderMark, cx.lineStart + line.pos, cx.lineStart + underline);\n        cx.nextLine();\n        cx.addLeafElement(leaf, elt(next == 61 ? Type.SetextHeading1 : Type.SetextHeading2, leaf.start, cx.prevLineEnd(), [\n            ...cx.parser.parseInline(leaf.content, leaf.start),\n            underlineMark\n        ]));\n        return true;\n    }\n    finish() {\n        return false;\n    }\n}\nconst DefaultLeafBlocks = {\n    LinkReference(_, leaf) { return leaf.content.charCodeAt(0) == 91 /* '[' */ ? new LinkReferenceParser(leaf) : null; },\n    SetextHeading() { return new SetextHeadingParser; }\n};\nconst DefaultEndLeaf = [\n    (_, line) => isAtxHeading(line) >= 0,\n    (_, line) => isFencedCode(line) >= 0,\n    (_, line) => isBlockquote(line) >= 0,\n    (p, line) => isBulletList(line, p, true) >= 0,\n    (p, line) => isOrderedList(line, p, true) >= 0,\n    (p, line) => isHorizontalRule(line, p, true) >= 0,\n    (p, line) => isHTMLBlock(line, p, true) >= 0\n];\nconst scanLineResult = { text: \"\", end: 0 };\n/// Block-level parsing functions get access to this context object.\nclass BlockContext {\n    /// @internal\n    constructor(\n    /// The parser configuration used.\n    parser, \n    /// @internal\n    input, fragments, \n    /// @internal\n    ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.line = new Line();\n        this.atEnd = false;\n        /// For reused nodes on gaps, we can't directly put the original\n        /// node into the tree, since that may be bitter than its parent.\n        /// When this happens, we create a dummy tree that is replaced by\n        /// the proper node in `injectGaps` @internal\n        this.reusePlaceholders = new Map;\n        this.stoppedAt = null;\n        /// The range index that absoluteLineStart points into @internal\n        this.rangeI = 0;\n        this.to = ranges[ranges.length - 1].to;\n        this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;\n        this.block = CompositeBlock.create(Type.Document, 0, this.lineStart, 0, 0);\n        this.stack = [this.block];\n        this.fragments = fragments.length ? new FragmentCursor(fragments, input) : null;\n        this.readLine();\n    }\n    get parsedPos() {\n        return this.absoluteLineStart;\n    }\n    advance() {\n        if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)\n            return this.finish();\n        let { line } = this;\n        for (;;) {\n            for (let markI = 0;;) {\n                let next = line.depth < this.stack.length ? this.stack[this.stack.length - 1] : null;\n                while (markI < line.markers.length && (!next || line.markers[markI].from < next.end)) {\n                    let mark = line.markers[markI++];\n                    this.addNode(mark.type, mark.from, mark.to);\n                }\n                if (!next)\n                    break;\n                this.finishContext();\n            }\n            if (line.pos < line.text.length)\n                break;\n            // Empty line\n            if (!this.nextLine())\n                return this.finish();\n        }\n        if (this.fragments && this.reuseFragment(line.basePos))\n            return null;\n        start: for (;;) {\n            for (let type of this.parser.blockParsers)\n                if (type) {\n                    let result = type(this, line);\n                    if (result != false) {\n                        if (result == true)\n                            return null;\n                        line.forward();\n                        continue start;\n                    }\n                }\n            break;\n        }\n        let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));\n        for (let parse of this.parser.leafBlockParsers)\n            if (parse) {\n                let parser = parse(this, leaf);\n                if (parser)\n                    leaf.parsers.push(parser);\n            }\n        lines: while (this.nextLine()) {\n            if (line.pos == line.text.length)\n                break;\n            if (line.indent < line.baseIndent + 4) {\n                for (let stop of this.parser.endLeafBlock)\n                    if (stop(this, line, leaf))\n                        break lines;\n            }\n            for (let parser of leaf.parsers)\n                if (parser.nextLine(this, line, leaf))\n                    return null;\n            leaf.content += \"\\n\" + line.scrub();\n            for (let m of line.markers)\n                leaf.marks.push(m);\n        }\n        this.finishLeaf(leaf);\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    reuseFragment(start) {\n        if (!this.fragments.moveTo(this.absoluteLineStart + start, this.absoluteLineStart) ||\n            !this.fragments.matches(this.block.hash))\n            return false;\n        let taken = this.fragments.takeNodes(this);\n        if (!taken)\n            return false;\n        this.absoluteLineStart += taken;\n        this.lineStart = toRelative(this.absoluteLineStart, this.ranges);\n        this.moveRangeI();\n        if (this.absoluteLineStart < this.to) {\n            this.lineStart++;\n            this.absoluteLineStart++;\n            this.readLine();\n        }\n        else {\n            this.atEnd = true;\n            this.readLine();\n        }\n        return true;\n    }\n    /// The number of parent blocks surrounding the current block.\n    get depth() {\n        return this.stack.length;\n    }\n    /// Get the type of the parent block at the given depth. When no\n    /// depth is passed, return the type of the innermost parent.\n    parentType(depth = this.depth - 1) {\n        return this.parser.nodeSet.types[this.stack[depth].type];\n    }\n    /// Move to the next input line. This should only be called by\n    /// (non-composite) [block parsers](#BlockParser.parse) that consume\n    /// the line directly, or leaf block parser\n    /// [`nextLine`](#LeafBlockParser.nextLine) methods when they\n    /// consume the current line (and return true).\n    nextLine() {\n        this.lineStart += this.line.text.length;\n        if (this.absoluteLineEnd >= this.to) {\n            this.absoluteLineStart = this.absoluteLineEnd;\n            this.atEnd = true;\n            this.readLine();\n            return false;\n        }\n        else {\n            this.lineStart++;\n            this.absoluteLineStart = this.absoluteLineEnd + 1;\n            this.moveRangeI();\n            this.readLine();\n            return true;\n        }\n    }\n    moveRangeI() {\n        while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to) {\n            this.rangeI++;\n            this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);\n        }\n    }\n    /// @internal\n    scanLine(start) {\n        let r = scanLineResult;\n        r.end = start;\n        if (start >= this.to) {\n            r.text = \"\";\n        }\n        else {\n            r.text = this.lineChunkAt(start);\n            r.end += r.text.length;\n            if (this.ranges.length > 1) {\n                let textOffset = this.absoluteLineStart, rangeI = this.rangeI;\n                while (this.ranges[rangeI].to < r.end) {\n                    rangeI++;\n                    let nextFrom = this.ranges[rangeI].from;\n                    let after = this.lineChunkAt(nextFrom);\n                    r.end = nextFrom + after.length;\n                    r.text = r.text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;\n                    textOffset = r.end - r.text.length;\n                }\n            }\n        }\n        return r;\n    }\n    /// @internal\n    readLine() {\n        let { line } = this, { text, end } = this.scanLine(this.absoluteLineStart);\n        this.absoluteLineEnd = end;\n        line.reset(text);\n        for (; line.depth < this.stack.length; line.depth++) {\n            let cx = this.stack[line.depth], handler = this.parser.skipContextMarkup[cx.type];\n            if (!handler)\n                throw new Error(\"Unhandled block context \" + Type[cx.type]);\n            if (!handler(cx, this, line))\n                break;\n            line.forward();\n        }\n    }\n    lineChunkAt(pos) {\n        let next = this.input.chunk(pos), text;\n        if (!this.input.lineChunks) {\n            let eol = next.indexOf(\"\\n\");\n            text = eol < 0 ? next : next.slice(0, eol);\n        }\n        else {\n            text = next == \"\\n\" ? \"\" : next;\n        }\n        return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;\n    }\n    /// The end position of the previous line.\n    prevLineEnd() { return this.atEnd ? this.lineStart : this.lineStart - 1; }\n    /// @internal\n    startContext(type, start, value = 0) {\n        this.block = CompositeBlock.create(type, value, this.lineStart + start, this.block.hash, this.lineStart + this.line.text.length);\n        this.stack.push(this.block);\n    }\n    /// Start a composite block. Should only be called from [block\n    /// parser functions](#BlockParser.parse) that return null.\n    startComposite(type, start, value = 0) {\n        this.startContext(this.parser.getNodeType(type), start, value);\n    }\n    /// @internal\n    addNode(block, from, to) {\n        if (typeof block == \"number\")\n            block = new Tree(this.parser.nodeSet.types[block], none, none, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from);\n        this.block.addChild(block, from - this.block.from);\n    }\n    /// Add a block element. Can be called by [block\n    /// parsers](#BlockParser.parse).\n    addElement(elt) {\n        this.block.addChild(elt.toTree(this.parser.nodeSet), elt.from - this.block.from);\n    }\n    /// Add a block element from a [leaf parser](#LeafBlockParser). This\n    /// makes sure any extra composite block markup (such as blockquote\n    /// markers) inside the block are also added to the syntax tree.\n    addLeafElement(leaf, elt) {\n        this.addNode(this.buffer\n            .writeElements(injectMarks(elt.children, leaf.marks), -elt.from)\n            .finish(elt.type, elt.to - elt.from), elt.from);\n    }\n    /// @internal\n    finishContext() {\n        let cx = this.stack.pop();\n        let top = this.stack[this.stack.length - 1];\n        top.addChild(cx.toTree(this.parser.nodeSet), cx.from - top.from);\n        this.block = top;\n    }\n    finish() {\n        while (this.stack.length > 1)\n            this.finishContext();\n        return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));\n    }\n    addGaps(tree) {\n        return this.ranges.length > 1 ?\n            injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.reusePlaceholders) : tree;\n    }\n    /// @internal\n    finishLeaf(leaf) {\n        for (let parser of leaf.parsers)\n            if (parser.finish(this, leaf))\n                return;\n        let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);\n        this.addNode(this.buffer\n            .writeElements(inline, -leaf.start)\n            .finish(Type.Paragraph, leaf.content.length), leaf.start);\n    }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n    /// @internal\n    get buffer() { return new Buffer(this.parser.nodeSet); }\n}\nfunction injectGaps(ranges, rangeI, tree, offset, dummies) {\n    let rangeEnd = ranges[rangeI].to;\n    let children = [], positions = [], start = tree.from + offset;\n    function movePastNext(upto, inclusive) {\n        while (inclusive ? upto >= rangeEnd : upto > rangeEnd) {\n            let size = ranges[rangeI + 1].from - rangeEnd;\n            offset += size;\n            upto += size;\n            rangeI++;\n            rangeEnd = ranges[rangeI].to;\n        }\n    }\n    for (let ch = tree.firstChild; ch; ch = ch.nextSibling) {\n        movePastNext(ch.from + offset, true);\n        let from = ch.from + offset, node, reuse = dummies.get(ch.tree);\n        if (reuse) {\n            node = reuse;\n        }\n        else if (ch.to + offset > rangeEnd) {\n            node = injectGaps(ranges, rangeI, ch, offset, dummies);\n            movePastNext(ch.to + offset, false);\n        }\n        else {\n            node = ch.toTree();\n        }\n        children.push(node);\n        positions.push(from - start);\n    }\n    movePastNext(tree.to + offset, false);\n    return new Tree(tree.type, children, positions, tree.to + offset - start, tree.tree ? tree.tree.propValues : undefined);\n}\n/// A Markdown parser configuration.\nclass MarkdownParser extends Parser {\n    /// @internal\n    constructor(\n    /// The parser's syntax [node\n    /// types](https://lezer.codemirror.net/docs/ref/#common.NodeSet).\n    nodeSet, \n    /// @internal\n    blockParsers, \n    /// @internal\n    leafBlockParsers, \n    /// @internal\n    blockNames, \n    /// @internal\n    endLeafBlock, \n    /// @internal\n    skipContextMarkup, \n    /// @internal\n    inlineParsers, \n    /// @internal\n    inlineNames, \n    /// @internal\n    wrappers) {\n        super();\n        this.nodeSet = nodeSet;\n        this.blockParsers = blockParsers;\n        this.leafBlockParsers = leafBlockParsers;\n        this.blockNames = blockNames;\n        this.endLeafBlock = endLeafBlock;\n        this.skipContextMarkup = skipContextMarkup;\n        this.inlineParsers = inlineParsers;\n        this.inlineNames = inlineNames;\n        this.wrappers = wrappers;\n        /// @internal\n        this.nodeTypes = Object.create(null);\n        for (let t of nodeSet.types)\n            this.nodeTypes[t.name] = t.id;\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new BlockContext(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Reconfigure the parser.\n    configure(spec) {\n        let config = resolveConfig(spec);\n        if (!config)\n            return this;\n        let { nodeSet, skipContextMarkup } = this;\n        let blockParsers = this.blockParsers.slice(), leafBlockParsers = this.leafBlockParsers.slice(), blockNames = this.blockNames.slice(), inlineParsers = this.inlineParsers.slice(), inlineNames = this.inlineNames.slice(), endLeafBlock = this.endLeafBlock.slice(), wrappers = this.wrappers;\n        if (nonEmpty(config.defineNodes)) {\n            skipContextMarkup = Object.assign({}, skipContextMarkup);\n            let nodeTypes = nodeSet.types.slice(), styles;\n            for (let s of config.defineNodes) {\n                let { name, block, composite, style } = typeof s == \"string\" ? { name: s } : s;\n                if (nodeTypes.some(t => t.name == name))\n                    continue;\n                if (composite)\n                    skipContextMarkup[nodeTypes.length] =\n                        (bl, cx, line) => composite(cx, line, bl.value);\n                let id = nodeTypes.length;\n                let group = composite ? [\"Block\", \"BlockContext\"] : !block ? undefined\n                    : id >= Type.ATXHeading1 && id <= Type.SetextHeading2 ? [\"Block\", \"LeafBlock\", \"Heading\"] : [\"Block\", \"LeafBlock\"];\n                nodeTypes.push(NodeType.define({\n                    id,\n                    name,\n                    props: group && [[NodeProp.group, group]]\n                }));\n                if (style) {\n                    if (!styles)\n                        styles = {};\n                    if (Array.isArray(style) || style instanceof Tag)\n                        styles[name] = style;\n                    else\n                        Object.assign(styles, style);\n                }\n            }\n            nodeSet = new NodeSet(nodeTypes);\n            if (styles)\n                nodeSet = nodeSet.extend(styleTags(styles));\n        }\n        if (nonEmpty(config.props))\n            nodeSet = nodeSet.extend(...config.props);\n        if (nonEmpty(config.remove)) {\n            for (let rm of config.remove) {\n                let block = this.blockNames.indexOf(rm), inline = this.inlineNames.indexOf(rm);\n                if (block > -1)\n                    blockParsers[block] = leafBlockParsers[block] = undefined;\n                if (inline > -1)\n                    inlineParsers[inline] = undefined;\n            }\n        }\n        if (nonEmpty(config.parseBlock)) {\n            for (let spec of config.parseBlock) {\n                let found = blockNames.indexOf(spec.name);\n                if (found > -1) {\n                    blockParsers[found] = spec.parse;\n                    leafBlockParsers[found] = spec.leaf;\n                }\n                else {\n                    let pos = spec.before ? findName(blockNames, spec.before)\n                        : spec.after ? findName(blockNames, spec.after) + 1 : blockNames.length - 1;\n                    blockParsers.splice(pos, 0, spec.parse);\n                    leafBlockParsers.splice(pos, 0, spec.leaf);\n                    blockNames.splice(pos, 0, spec.name);\n                }\n                if (spec.endLeaf)\n                    endLeafBlock.push(spec.endLeaf);\n            }\n        }\n        if (nonEmpty(config.parseInline)) {\n            for (let spec of config.parseInline) {\n                let found = inlineNames.indexOf(spec.name);\n                if (found > -1) {\n                    inlineParsers[found] = spec.parse;\n                }\n                else {\n                    let pos = spec.before ? findName(inlineNames, spec.before)\n                        : spec.after ? findName(inlineNames, spec.after) + 1 : inlineNames.length - 1;\n                    inlineParsers.splice(pos, 0, spec.parse);\n                    inlineNames.splice(pos, 0, spec.name);\n                }\n            }\n        }\n        if (config.wrap)\n            wrappers = wrappers.concat(config.wrap);\n        return new MarkdownParser(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);\n    }\n    /// @internal\n    getNodeType(name) {\n        let found = this.nodeTypes[name];\n        if (found == null)\n            throw new RangeError(`Unknown node type '${name}'`);\n        return found;\n    }\n    /// Parse the given piece of inline text at the given offset,\n    /// returning an array of [`Element`](#Element) objects representing\n    /// the inline content.\n    parseInline(text, offset) {\n        let cx = new InlineContext(this, text, offset);\n        outer: for (let pos = offset; pos < cx.end;) {\n            let next = cx.char(pos);\n            for (let token of this.inlineParsers)\n                if (token) {\n                    let result = token(cx, next, pos);\n                    if (result >= 0) {\n                        pos = result;\n                        continue outer;\n                    }\n                }\n            pos++;\n        }\n        return cx.resolveMarkers(0);\n    }\n}\nfunction nonEmpty(a) {\n    return a != null && a.length > 0;\n}\nfunction resolveConfig(spec) {\n    if (!Array.isArray(spec))\n        return spec;\n    if (spec.length == 0)\n        return null;\n    let conf = resolveConfig(spec[0]);\n    if (spec.length == 1)\n        return conf;\n    let rest = resolveConfig(spec.slice(1));\n    if (!rest || !conf)\n        return conf || rest;\n    let conc = (a, b) => (a || none).concat(b || none);\n    let wrapA = conf.wrap, wrapB = rest.wrap;\n    return {\n        props: conc(conf.props, rest.props),\n        defineNodes: conc(conf.defineNodes, rest.defineNodes),\n        parseBlock: conc(conf.parseBlock, rest.parseBlock),\n        parseInline: conc(conf.parseInline, rest.parseInline),\n        remove: conc(conf.remove, rest.remove),\n        wrap: !wrapA ? wrapB : !wrapB ? wrapA :\n            (inner, input, fragments, ranges) => wrapA(wrapB(inner, input, fragments, ranges), input, fragments, ranges)\n    };\n}\nfunction findName(names, name) {\n    let found = names.indexOf(name);\n    if (found < 0)\n        throw new RangeError(`Position specified relative to unknown parser ${name}`);\n    return found;\n}\nlet nodeTypes = [NodeType.none];\nfor (let i = 1, name; name = Type[i]; i++) {\n    nodeTypes[i] = NodeType.define({\n        id: i,\n        name,\n        props: i >= Type.Escape ? [] : [[NodeProp.group, i in DefaultSkipMarkup ? [\"Block\", \"BlockContext\"] : [\"Block\", \"LeafBlock\"]]],\n        top: name == \"Document\"\n    });\n}\nconst none = [];\nclass Buffer {\n    constructor(nodeSet) {\n        this.nodeSet = nodeSet;\n        this.content = [];\n        this.nodes = [];\n    }\n    write(type, from, to, children = 0) {\n        this.content.push(type, from, to, 4 + children * 4);\n        return this;\n    }\n    writeElements(elts, offset = 0) {\n        for (let e of elts)\n            e.writeTo(this, offset);\n        return this;\n    }\n    finish(type, length) {\n        return Tree.build({\n            buffer: this.content,\n            nodeSet: this.nodeSet,\n            reused: this.nodes,\n            topID: type,\n            length\n        });\n    }\n}\n/// Elements are used to compose syntax nodes during parsing.\nclass Element {\n    /// @internal\n    constructor(\n    /// The node's\n    /// [id](https://lezer.codemirror.net/docs/ref/#common.NodeType.id).\n    type, \n    /// The start of the node, as an offset from the start of the document.\n    from, \n    /// The end of the node.\n    to, \n    /// The node's child nodes @internal\n    children = none) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.children = children;\n    }\n    /// @internal\n    writeTo(buf, offset) {\n        let startOff = buf.content.length;\n        buf.writeElements(this.children, offset);\n        buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);\n    }\n    /// @internal\n    toTree(nodeSet) {\n        return new Buffer(nodeSet).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);\n    }\n}\nclass TreeElement {\n    constructor(tree, from) {\n        this.tree = tree;\n        this.from = from;\n    }\n    get to() { return this.from + this.tree.length; }\n    get type() { return this.tree.type.id; }\n    get children() { return none; }\n    writeTo(buf, offset) {\n        buf.nodes.push(this.tree);\n        buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);\n    }\n    toTree() { return this.tree; }\n}\nfunction elt(type, from, to, children) {\n    return new Element(type, from, to, children);\n}\nconst EmphasisUnderscore = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst EmphasisAsterisk = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst LinkStart = {}, ImageStart = {};\nclass InlineDelimiter {\n    constructor(type, from, to, side) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.side = side;\n    }\n}\nconst Escapable = \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\";\nlet Punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\u2010-\\u2027]/;\ntry {\n    Punctuation = new RegExp(\"[\\\\p{Pc}|\\\\p{Pd}|\\\\p{Pe}|\\\\p{Pf}|\\\\p{Pi}|\\\\p{Po}|\\\\p{Ps}]\", \"u\");\n}\ncatch (_) { }\nconst DefaultInline = {\n    Escape(cx, next, start) {\n        if (next != 92 /* '\\\\' */ || start == cx.end - 1)\n            return -1;\n        let escaped = cx.char(start + 1);\n        for (let i = 0; i < Escapable.length; i++)\n            if (Escapable.charCodeAt(i) == escaped)\n                return cx.append(elt(Type.Escape, start, start + 2));\n        return -1;\n    },\n    Entity(cx, next, start) {\n        if (next != 38 /* '&' */)\n            return -1;\n        let m = /^(?:#\\d+|#x[a-f\\d]+|\\w+);/i.exec(cx.slice(start + 1, start + 31));\n        return m ? cx.append(elt(Type.Entity, start, start + 1 + m[0].length)) : -1;\n    },\n    InlineCode(cx, next, start) {\n        if (next != 96 /* '`' */ || start && cx.char(start - 1) == 96)\n            return -1;\n        let pos = start + 1;\n        while (pos < cx.end && cx.char(pos) == 96)\n            pos++;\n        let size = pos - start, curSize = 0;\n        for (; pos < cx.end; pos++) {\n            if (cx.char(pos) == 96) {\n                curSize++;\n                if (curSize == size && cx.char(pos + 1) != 96)\n                    return cx.append(elt(Type.InlineCode, start, pos + 1, [\n                        elt(Type.CodeMark, start, start + size),\n                        elt(Type.CodeMark, pos + 1 - size, pos + 1)\n                    ]));\n            }\n            else {\n                curSize = 0;\n            }\n        }\n        return -1;\n    },\n    HTMLTag(cx, next, start) {\n        if (next != 60 /* '<' */ || start == cx.end - 1)\n            return -1;\n        let after = cx.slice(start + 1, cx.end);\n        let url = /^(?:[a-z][-\\w+.]+:[^\\s>]+|[a-z\\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?(?:\\.[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?)*)>/i.exec(after);\n        if (url) {\n            return cx.append(elt(Type.Autolink, start, start + 1 + url[0].length, [\n                elt(Type.LinkMark, start, start + 1),\n                // url[0] includes the closing bracket, so exclude it from this slice\n                elt(Type.URL, start + 1, start + url[0].length),\n                elt(Type.LinkMark, start + url[0].length, start + 1 + url[0].length)\n            ]));\n        }\n        let comment = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);\n        if (comment)\n            return cx.append(elt(Type.Comment, start, start + 1 + comment[0].length));\n        let procInst = /^\\?[^]*?\\?>/.exec(after);\n        if (procInst)\n            return cx.append(elt(Type.ProcessingInstruction, start, start + 1 + procInst[0].length));\n        let m = /^(?:![A-Z][^]*?>|!\\[CDATA\\[[^]*?\\]\\]>|\\/\\s*[a-zA-Z][\\w-]*\\s*>|\\s*[a-zA-Z][\\w-]*(\\s+[a-zA-Z:_][\\w-.:]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*(\\/\\s*)?>)/.exec(after);\n        if (!m)\n            return -1;\n        return cx.append(elt(Type.HTMLTag, start, start + 1 + m[0].length));\n    },\n    Emphasis(cx, next, start) {\n        if (next != 95 && next != 42)\n            return -1;\n        let pos = start + 1;\n        while (cx.char(pos) == next)\n            pos++;\n        let before = cx.slice(start - 1, start), after = cx.slice(pos, pos + 1);\n        let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n        let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n        let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);\n        let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);\n        let canOpen = leftFlanking && (next == 42 || !rightFlanking || pBefore);\n        let canClose = rightFlanking && (next == 42 || !leftFlanking || pAfter);\n        return cx.append(new InlineDelimiter(next == 95 ? EmphasisUnderscore : EmphasisAsterisk, start, pos, (canOpen ? 1 /* Mark.Open */ : 0 /* Mark.None */) | (canClose ? 2 /* Mark.Close */ : 0 /* Mark.None */)));\n    },\n    HardBreak(cx, next, start) {\n        if (next == 92 /* '\\\\' */ && cx.char(start + 1) == 10 /* '\\n' */)\n            return cx.append(elt(Type.HardBreak, start, start + 2));\n        if (next == 32) {\n            let pos = start + 1;\n            while (cx.char(pos) == 32)\n                pos++;\n            if (cx.char(pos) == 10 && pos >= start + 2)\n                return cx.append(elt(Type.HardBreak, start, pos + 1));\n        }\n        return -1;\n    },\n    Link(cx, next, start) {\n        return next == 91 /* '[' */ ? cx.append(new InlineDelimiter(LinkStart, start, start + 1, 1 /* Mark.Open */)) : -1;\n    },\n    Image(cx, next, start) {\n        return next == 33 /* '!' */ && cx.char(start + 1) == 91 /* '[' */\n            ? cx.append(new InlineDelimiter(ImageStart, start, start + 2, 1 /* Mark.Open */)) : -1;\n    },\n    LinkEnd(cx, next, start) {\n        if (next != 93 /* ']' */)\n            return -1;\n        // Scanning back to the next link/image start marker\n        for (let i = cx.parts.length - 1; i >= 0; i--) {\n            let part = cx.parts[i];\n            if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {\n                // If this one has been set invalid (because it would produce\n                // a nested link) or there's no valid link here ignore both.\n                if (!part.side || cx.skipSpace(part.to) == start && !/[(\\[]/.test(cx.slice(start + 1, start + 2))) {\n                    cx.parts[i] = null;\n                    return -1;\n                }\n                // Finish the content and replace the entire range in\n                // this.parts with the link/image node.\n                let content = cx.takeContent(i);\n                let link = cx.parts[i] = finishLink(cx, content, part.type == LinkStart ? Type.Link : Type.Image, part.from, start + 1);\n                // Set any open-link markers before this link to invalid.\n                if (part.type == LinkStart)\n                    for (let j = 0; j < i; j++) {\n                        let p = cx.parts[j];\n                        if (p instanceof InlineDelimiter && p.type == LinkStart)\n                            p.side = 0 /* Mark.None */;\n                    }\n                return link.to;\n            }\n        }\n        return -1;\n    }\n};\nfunction finishLink(cx, content, type, start, startPos) {\n    let { text } = cx, next = cx.char(startPos), endPos = startPos;\n    content.unshift(elt(Type.LinkMark, start, start + (type == Type.Image ? 2 : 1)));\n    content.push(elt(Type.LinkMark, startPos - 1, startPos));\n    if (next == 40 /* '(' */) {\n        let pos = cx.skipSpace(startPos + 1);\n        let dest = parseURL(text, pos - cx.offset, cx.offset), title;\n        if (dest) {\n            pos = cx.skipSpace(dest.to);\n            // The destination and title must be separated by whitespace\n            if (pos != dest.to) {\n                title = parseLinkTitle(text, pos - cx.offset, cx.offset);\n                if (title)\n                    pos = cx.skipSpace(title.to);\n            }\n        }\n        if (cx.char(pos) == 41 /* ')' */) {\n            content.push(elt(Type.LinkMark, startPos, startPos + 1));\n            endPos = pos + 1;\n            if (dest)\n                content.push(dest);\n            if (title)\n                content.push(title);\n            content.push(elt(Type.LinkMark, pos, endPos));\n        }\n    }\n    else if (next == 91 /* '[' */) {\n        let label = parseLinkLabel(text, startPos - cx.offset, cx.offset, false);\n        if (label) {\n            content.push(label);\n            endPos = label.to;\n        }\n    }\n    return elt(type, start, endPos, content);\n}\n// These return `null` when falling off the end of the input, `false`\n// when parsing fails otherwise (for use in the incremental link\n// reference parser).\nfunction parseURL(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next == 60 /* '<' */) {\n        for (let pos = start + 1; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (ch == 62 /* '>' */)\n                return elt(Type.URL, start + offset, pos + 1 + offset);\n            if (ch == 60 || ch == 10 /* '<\\n' */)\n                return false;\n        }\n        return null;\n    }\n    else {\n        let depth = 0, pos = start;\n        for (let escaped = false; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (space(ch)) {\n                break;\n            }\n            else if (escaped) {\n                escaped = false;\n            }\n            else if (ch == 40 /* '(' */) {\n                depth++;\n            }\n            else if (ch == 41 /* ')' */) {\n                if (!depth)\n                    break;\n                depth--;\n            }\n            else if (ch == 92 /* '\\\\' */) {\n                escaped = true;\n            }\n        }\n        return pos > start ? elt(Type.URL, start + offset, pos + offset) : pos == text.length ? null : false;\n    }\n}\nfunction parseLinkTitle(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next != 39 && next != 34 && next != 40 /* '\"\\'(' */)\n        return false;\n    let end = next == 40 ? 41 : next;\n    for (let pos = start + 1, escaped = false; pos < text.length; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == end)\n            return elt(Type.LinkTitle, start + offset, pos + 1 + offset);\n        else if (ch == 92 /* '\\\\' */)\n            escaped = true;\n    }\n    return null;\n}\nfunction parseLinkLabel(text, start, offset, requireNonWS) {\n    for (let escaped = false, pos = start + 1, end = Math.min(text.length, pos + 999); pos < end; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == 93 /* ']' */)\n            return requireNonWS ? false : elt(Type.LinkLabel, start + offset, pos + 1 + offset);\n        else {\n            if (requireNonWS && !space(ch))\n                requireNonWS = false;\n            if (ch == 91 /* '[' */)\n                return false;\n            else if (ch == 92 /* '\\\\' */)\n                escaped = true;\n        }\n    }\n    return null;\n}\n/// Inline parsing functions get access to this context, and use it to\n/// read the content and emit syntax nodes.\nclass InlineContext {\n    /// @internal\n    constructor(\n    /// The parser that is being used.\n    parser, \n    /// The text of this inline section.\n    text, \n    /// The starting offset of the section in the document.\n    offset) {\n        this.parser = parser;\n        this.text = text;\n        this.offset = offset;\n        /// @internal\n        this.parts = [];\n    }\n    /// Get the character code at the given (document-relative)\n    /// position.\n    char(pos) { return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset); }\n    /// The position of the end of this inline section.\n    get end() { return this.offset + this.text.length; }\n    /// Get a substring of this inline section. Again uses\n    /// document-relative positions.\n    slice(from, to) { return this.text.slice(from - this.offset, to - this.offset); }\n    /// @internal\n    append(elt) {\n        this.parts.push(elt);\n        return elt.to;\n    }\n    /// Add a [delimiter](#DelimiterType) at this given position. `open`\n    /// and `close` indicate whether this delimiter is opening, closing,\n    /// or both. Returns the end of the delimiter, for convenient\n    /// returning from [parse functions](#InlineParser.parse).\n    addDelimiter(type, from, to, open, close) {\n        return this.append(new InlineDelimiter(type, from, to, (open ? 1 /* Mark.Open */ : 0 /* Mark.None */) | (close ? 2 /* Mark.Close */ : 0 /* Mark.None */)));\n    }\n    /// Add an inline element. Returns the end of the element.\n    addElement(elt) {\n        return this.append(elt);\n    }\n    /// Resolve markers between this.parts.length and from, wrapping matched markers in the\n    /// appropriate node and updating the content of this.parts. @internal\n    resolveMarkers(from) {\n        // Scan forward, looking for closing tokens\n        for (let i = from; i < this.parts.length; i++) {\n            let close = this.parts[i];\n            if (!(close instanceof InlineDelimiter && close.type.resolve && (close.side & 2 /* Mark.Close */)))\n                continue;\n            let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;\n            let closeSize = close.to - close.from;\n            let open, j = i - 1;\n            // Continue scanning for a matching opening token\n            for (; j >= from; j--) {\n                let part = this.parts[j];\n                if (part instanceof InlineDelimiter && (part.side & 1 /* Mark.Open */) && part.type == close.type &&\n                    // Ignore emphasis delimiters where the character count doesn't match\n                    !(emp && ((close.side & 1 /* Mark.Open */) || (part.side & 2 /* Mark.Close */)) &&\n                        (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))) {\n                    open = part;\n                    break;\n                }\n            }\n            if (!open)\n                continue;\n            let type = close.type.resolve, content = [];\n            let start = open.from, end = close.to;\n            // Emphasis marker effect depends on the character count. Size consumed is minimum of the two\n            // markers.\n            if (emp) {\n                let size = Math.min(2, open.to - open.from, closeSize);\n                start = open.to - size;\n                end = close.from + size;\n                type = size == 1 ? \"Emphasis\" : \"StrongEmphasis\";\n            }\n            // Move the covered region into content, optionally adding marker nodes\n            if (open.type.mark)\n                content.push(this.elt(open.type.mark, start, open.to));\n            for (let k = j + 1; k < i; k++) {\n                if (this.parts[k] instanceof Element)\n                    content.push(this.parts[k]);\n                this.parts[k] = null;\n            }\n            if (close.type.mark)\n                content.push(this.elt(close.type.mark, close.from, end));\n            let element = this.elt(type, start, end, content);\n            // If there are leftover emphasis marker characters, shrink the close/open markers. Otherwise, clear them.\n            this.parts[j] = emp && open.from != start ? new InlineDelimiter(open.type, open.from, start, open.side) : null;\n            let keep = this.parts[i] = emp && close.to != end ? new InlineDelimiter(close.type, end, close.to, close.side) : null;\n            // Insert the new element in this.parts\n            if (keep)\n                this.parts.splice(i, 0, element);\n            else\n                this.parts[i] = element;\n        }\n        // Collect the elements remaining in this.parts into an array.\n        let result = [];\n        for (let i = from; i < this.parts.length; i++) {\n            let part = this.parts[i];\n            if (part instanceof Element)\n                result.push(part);\n        }\n        return result;\n    }\n    /// Find an opening delimiter of the given type. Returns `null` if\n    /// no delimiter is found, or an index that can be passed to\n    /// [`takeContent`](#InlineContext.takeContent) otherwise.\n    findOpeningDelimiter(type) {\n        for (let i = this.parts.length - 1; i >= 0; i--) {\n            let part = this.parts[i];\n            if (part instanceof InlineDelimiter && part.type == type)\n                return i;\n        }\n        return null;\n    }\n    /// Remove all inline elements and delimiters starting from the\n    /// given index (which you should get from\n    /// [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),\n    /// resolve delimiters inside of them, and return them as an array\n    /// of elements.\n    takeContent(startIndex) {\n        let content = this.resolveMarkers(startIndex);\n        this.parts.length = startIndex;\n        return content;\n    }\n    /// Skip space after the given (document) position, returning either\n    /// the position of the next non-space character or the end of the\n    /// section.\n    skipSpace(from) { return skipSpace(this.text, from - this.offset) + this.offset; }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n}\nfunction injectMarks(elements, marks) {\n    if (!marks.length)\n        return elements;\n    if (!elements.length)\n        return marks;\n    let elts = elements.slice(), eI = 0;\n    for (let mark of marks) {\n        while (eI < elts.length && elts[eI].to < mark.to)\n            eI++;\n        if (eI < elts.length && elts[eI].from < mark.from) {\n            let e = elts[eI];\n            if (e instanceof Element)\n                elts[eI] = new Element(e.type, e.from, e.to, injectMarks(e.children, [mark]));\n        }\n        else {\n            elts.splice(eI++, 0, mark);\n        }\n    }\n    return elts;\n}\n// These are blocks that can span blank lines, and should thus only be\n// reused if their next sibling is also being reused.\nconst NotLast = [Type.CodeBlock, Type.ListItem, Type.OrderedList, Type.BulletList];\nclass FragmentCursor {\n    constructor(fragments, input) {\n        this.fragments = fragments;\n        this.input = input;\n        // Index into fragment array\n        this.i = 0;\n        // Active fragment\n        this.fragment = null;\n        this.fragmentEnd = -1;\n        // Cursor into the current fragment, if any. When `moveTo` returns\n        // true, this points at the first block after `pos`.\n        this.cursor = null;\n        if (fragments.length)\n            this.fragment = fragments[this.i++];\n    }\n    nextFragment() {\n        this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;\n        this.cursor = null;\n        this.fragmentEnd = -1;\n    }\n    moveTo(pos, lineStart) {\n        while (this.fragment && this.fragment.to <= pos)\n            this.nextFragment();\n        if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0))\n            return false;\n        if (this.fragmentEnd < 0) {\n            let end = this.fragment.to;\n            while (end > 0 && this.input.read(end - 1, end) != \"\\n\")\n                end--;\n            this.fragmentEnd = end ? end - 1 : 0;\n        }\n        let c = this.cursor;\n        if (!c) {\n            c = this.cursor = this.fragment.tree.cursor();\n            c.firstChild();\n        }\n        let rPos = pos + this.fragment.offset;\n        while (c.to <= rPos)\n            if (!c.parent())\n                return false;\n        for (;;) {\n            if (c.from >= rPos)\n                return this.fragment.from <= lineStart;\n            if (!c.childAfter(rPos))\n                return false;\n        }\n    }\n    matches(hash) {\n        let tree = this.cursor.tree;\n        return tree && tree.prop(NodeProp.contextHash) == hash;\n    }\n    takeNodes(cx) {\n        let cur = this.cursor, off = this.fragment.offset, fragEnd = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0);\n        let start = cx.absoluteLineStart, end = start, blockI = cx.block.children.length;\n        let prevEnd = end, prevI = blockI;\n        for (;;) {\n            if (cur.to - off > fragEnd) {\n                if (cur.type.isAnonymous && cur.firstChild())\n                    continue;\n                break;\n            }\n            let pos = toRelative(cur.from - off, cx.ranges);\n            if (cur.to - off <= cx.ranges[cx.rangeI].to) { // Fits in current range\n                cx.addNode(cur.tree, pos);\n            }\n            else {\n                let dummy = new Tree(cx.parser.nodeSet.types[Type.Paragraph], [], [], 0, cx.block.hashProp);\n                cx.reusePlaceholders.set(dummy, cur.tree);\n                cx.addNode(dummy, pos);\n            }\n            // Taken content must always end in a block, because incremental\n            // parsing happens on block boundaries. Never stop directly\n            // after an indented code block, since those can continue after\n            // any number of blank lines.\n            if (cur.type.is(\"Block\")) {\n                if (NotLast.indexOf(cur.type.id) < 0) {\n                    end = cur.to - off;\n                    blockI = cx.block.children.length;\n                }\n                else {\n                    end = prevEnd;\n                    blockI = prevI;\n                    prevEnd = cur.to - off;\n                    prevI = cx.block.children.length;\n                }\n            }\n            if (!cur.nextSibling())\n                break;\n        }\n        while (cx.block.children.length > blockI) {\n            cx.block.children.pop();\n            cx.block.positions.pop();\n        }\n        return end - start;\n    }\n}\n// Convert an input-stream-relative position to a\n// Markdown-doc-relative position by subtracting the size of all input\n// gaps before `abs`.\nfunction toRelative(abs, ranges) {\n    let pos = abs;\n    for (let i = 1; i < ranges.length; i++) {\n        let gapFrom = ranges[i - 1].to, gapTo = ranges[i].from;\n        if (gapFrom < abs)\n            pos -= gapTo - gapFrom;\n    }\n    return pos;\n}\nconst markdownHighlighting = styleTags({\n    \"Blockquote/...\": tags.quote,\n    HorizontalRule: tags.contentSeparator,\n    \"ATXHeading1/... SetextHeading1/...\": tags.heading1,\n    \"ATXHeading2/... SetextHeading2/...\": tags.heading2,\n    \"ATXHeading3/...\": tags.heading3,\n    \"ATXHeading4/...\": tags.heading4,\n    \"ATXHeading5/...\": tags.heading5,\n    \"ATXHeading6/...\": tags.heading6,\n    \"Comment CommentBlock\": tags.comment,\n    Escape: tags.escape,\n    Entity: tags.character,\n    \"Emphasis/...\": tags.emphasis,\n    \"StrongEmphasis/...\": tags.strong,\n    \"Link/... Image/...\": tags.link,\n    \"OrderedList/... BulletList/...\": tags.list,\n    \"BlockQuote/...\": tags.quote,\n    \"InlineCode CodeText\": tags.monospace,\n    \"URL Autolink\": tags.url,\n    \"HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark\": tags.processingInstruction,\n    \"CodeInfo LinkLabel\": tags.labelName,\n    LinkTitle: tags.string,\n    Paragraph: tags.content\n});\n/// The default CommonMark parser.\nconst parser = new MarkdownParser(new NodeSet(nodeTypes).extend(markdownHighlighting), Object.keys(DefaultBlockParsers).map(n => DefaultBlockParsers[n]), Object.keys(DefaultBlockParsers).map(n => DefaultLeafBlocks[n]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map(n => DefaultInline[n]), Object.keys(DefaultInline), []);\n\nfunction leftOverSpace(node, from, to) {\n    let ranges = [];\n    for (let n = node.firstChild, pos = from;; n = n.nextSibling) {\n        let nextPos = n ? n.from : to;\n        if (nextPos > pos)\n            ranges.push({ from: pos, to: nextPos });\n        if (!n)\n            break;\n        pos = n.to;\n    }\n    return ranges;\n}\n/// Create a Markdown extension to enable nested parsing on code\n/// blocks and/or embedded HTML.\nfunction parseCode(config) {\n    let { codeParser, htmlParser } = config;\n    let wrap = parseMixed((node, input) => {\n        let id = node.type.id;\n        if (codeParser && (id == Type.CodeBlock || id == Type.FencedCode)) {\n            let info = \"\";\n            if (id == Type.FencedCode) {\n                let infoNode = node.node.getChild(Type.CodeInfo);\n                if (infoNode)\n                    info = input.read(infoNode.from, infoNode.to);\n            }\n            let parser = codeParser(info);\n            if (parser)\n                return { parser, overlay: node => node.type.id == Type.CodeText };\n        }\n        else if (htmlParser && (id == Type.HTMLBlock || id == Type.HTMLTag)) {\n            return { parser: htmlParser, overlay: leftOverSpace(node.node, node.from, node.to) };\n        }\n        return null;\n    });\n    return { wrap };\n}\n\nconst StrikethroughDelim = { resolve: \"Strikethrough\", mark: \"StrikethroughMark\" };\n/// An extension that implements\n/// [GFM-style](https://github.github.com/gfm/#strikethrough-extension-)\n/// Strikethrough syntax using `~~` delimiters.\nconst Strikethrough = {\n    defineNodes: [{\n            name: \"Strikethrough\",\n            style: { \"Strikethrough/...\": tags.strikethrough }\n        }, {\n            name: \"StrikethroughMark\",\n            style: tags.processingInstruction\n        }],\n    parseInline: [{\n            name: \"Strikethrough\",\n            parse(cx, next, pos) {\n                if (next != 126 /* '~' */ || cx.char(pos + 1) != 126 || cx.char(pos + 2) == 126)\n                    return -1;\n                let before = cx.slice(pos - 1, pos), after = cx.slice(pos + 2, pos + 3);\n                let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n                let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n                return cx.addDelimiter(StrikethroughDelim, pos, pos + 2, !sAfter && (!pAfter || sBefore || pBefore), !sBefore && (!pBefore || sAfter || pAfter));\n            },\n            after: \"Emphasis\"\n        }]\n};\nfunction parseRow(cx, line, startI = 0, elts, offset = 0) {\n    let count = 0, first = true, cellStart = -1, cellEnd = -1, esc = false;\n    let parseCell = () => {\n        elts.push(cx.elt(\"TableCell\", offset + cellStart, offset + cellEnd, cx.parser.parseInline(line.slice(cellStart, cellEnd), offset + cellStart)));\n    };\n    for (let i = startI; i < line.length; i++) {\n        let next = line.charCodeAt(i);\n        if (next == 124 /* '|' */ && !esc) {\n            if (!first || cellStart > -1)\n                count++;\n            first = false;\n            if (elts) {\n                if (cellStart > -1)\n                    parseCell();\n                elts.push(cx.elt(\"TableDelimiter\", i + offset, i + offset + 1));\n            }\n            cellStart = cellEnd = -1;\n        }\n        else if (esc || next != 32 && next != 9) {\n            if (cellStart < 0)\n                cellStart = i;\n            cellEnd = i + 1;\n        }\n        esc = !esc && next == 92;\n    }\n    if (cellStart > -1) {\n        count++;\n        if (elts)\n            parseCell();\n    }\n    return count;\n}\nfunction hasPipe(str, start) {\n    for (let i = start; i < str.length; i++) {\n        let next = str.charCodeAt(i);\n        if (next == 124 /* '|' */)\n            return true;\n        if (next == 92 /* '\\\\' */)\n            i++;\n    }\n    return false;\n}\nconst delimiterLine = /^\\|?(\\s*:?-+:?\\s*\\|)+(\\s*:?-+:?\\s*)?$/;\nclass TableParser {\n    constructor() {\n        // Null means we haven't seen the second line yet, false means this\n        // isn't a table, and an array means this is a table and we've\n        // parsed the given rows so far.\n        this.rows = null;\n    }\n    nextLine(cx, line, leaf) {\n        if (this.rows == null) { // Second line\n            this.rows = false;\n            let lineText;\n            if ((line.next == 45 || line.next == 58 || line.next == 124 /* '-:|' */) &&\n                delimiterLine.test(lineText = line.text.slice(line.pos))) {\n                let firstRow = [], firstCount = parseRow(cx, leaf.content, 0, firstRow, leaf.start);\n                if (firstCount == parseRow(cx, lineText, line.pos))\n                    this.rows = [cx.elt(\"TableHeader\", leaf.start, leaf.start + leaf.content.length, firstRow),\n                        cx.elt(\"TableDelimiter\", cx.lineStart + line.pos, cx.lineStart + line.text.length)];\n            }\n        }\n        else if (this.rows) { // Line after the second\n            let content = [];\n            parseRow(cx, line.text, line.pos, content, cx.lineStart);\n            this.rows.push(cx.elt(\"TableRow\", cx.lineStart + line.pos, cx.lineStart + line.text.length, content));\n        }\n        return false;\n    }\n    finish(cx, leaf) {\n        if (!this.rows)\n            return false;\n        cx.addLeafElement(leaf, cx.elt(\"Table\", leaf.start, leaf.start + leaf.content.length, this.rows));\n        return true;\n    }\n}\n/// This extension provides\n/// [GFM-style](https://github.github.com/gfm/#tables-extension-)\n/// tables, using syntax like this:\n///\n/// ```\n/// | head 1 | head 2 |\n/// | ---    | ---    |\n/// | cell 1 | cell 2 |\n/// ```\nconst Table = {\n    defineNodes: [\n        { name: \"Table\", block: true },\n        { name: \"TableHeader\", style: { \"TableHeader/...\": tags.heading } },\n        \"TableRow\",\n        { name: \"TableCell\", style: tags.content },\n        { name: \"TableDelimiter\", style: tags.processingInstruction },\n    ],\n    parseBlock: [{\n            name: \"Table\",\n            leaf(_, leaf) { return hasPipe(leaf.content, 0) ? new TableParser : null; },\n            endLeaf(cx, line, leaf) {\n                if (leaf.parsers.some(p => p instanceof TableParser) || !hasPipe(line.text, line.basePos))\n                    return false;\n                let next = cx.scanLine(cx.absoluteLineEnd + 1).text;\n                return delimiterLine.test(next) && parseRow(cx, line.text, line.basePos) == parseRow(cx, next, line.basePos);\n            },\n            before: \"SetextHeading\"\n        }]\n};\nclass TaskParser {\n    nextLine() { return false; }\n    finish(cx, leaf) {\n        cx.addLeafElement(leaf, cx.elt(\"Task\", leaf.start, leaf.start + leaf.content.length, [\n            cx.elt(\"TaskMarker\", leaf.start, leaf.start + 3),\n            ...cx.parser.parseInline(leaf.content.slice(3), leaf.start + 3)\n        ]));\n        return true;\n    }\n}\n/// Extension providing\n/// [GFM-style](https://github.github.com/gfm/#task-list-items-extension-)\n/// task list items, where list items can be prefixed with `[ ]` or\n/// `[x]` to add a checkbox.\nconst TaskList = {\n    defineNodes: [\n        { name: \"Task\", block: true, style: tags.list },\n        { name: \"TaskMarker\", style: tags.atom }\n    ],\n    parseBlock: [{\n            name: \"TaskList\",\n            leaf(cx, leaf) {\n                return /^\\[[ xX]\\][ \\t]/.test(leaf.content) && cx.parentType().name == \"ListItem\" ? new TaskParser : null;\n            },\n            after: \"SetextHeading\"\n        }]\n};\nconst autolinkRE = /(www\\.)|(https?:\\/\\/)|([\\w.+-]+@)|(mailto:|xmpp:)/gy;\nconst urlRE = /[\\w-]+(\\.[\\w-]+)+(\\/[^\\s<]*)?/gy;\nconst lastTwoDomainWords = /[\\w-]+\\.[\\w-]+($|\\/)/;\nconst emailRE = /[\\w.+-]+@[\\w-]+(\\.[\\w.-]+)+/gy;\nconst xmppResourceRE = /\\/[a-zA-Z\\d@.]+/gy;\nfunction count(str, from, to, ch) {\n    let result = 0;\n    for (let i = from; i < to; i++)\n        if (str[i] == ch)\n            result++;\n    return result;\n}\nfunction autolinkURLEnd(text, from) {\n    urlRE.lastIndex = from;\n    let m = urlRE.exec(text);\n    if (!m || lastTwoDomainWords.exec(m[0])[0].indexOf(\"_\") > -1)\n        return -1;\n    let end = from + m[0].length;\n    for (;;) {\n        let last = text[end - 1], m;\n        if (/[?!.,:*_~]/.test(last) ||\n            last == \")\" && count(text, from, end, \")\") > count(text, from, end, \"(\"))\n            end--;\n        else if (last == \";\" && (m = /&(?:#\\d+|#x[a-f\\d]+|\\w+);$/.exec(text.slice(from, end))))\n            end = from + m.index;\n        else\n            break;\n    }\n    return end;\n}\nfunction autolinkEmailEnd(text, from) {\n    emailRE.lastIndex = from;\n    let m = emailRE.exec(text);\n    if (!m)\n        return -1;\n    let last = m[0][m[0].length - 1];\n    return last == \"_\" || last == \"-\" ? -1 : from + m[0].length - (last == \".\" ? 1 : 0);\n}\n/// Extension that implements autolinking for\n/// `www.`/`http://`/`https://`/`mailto:`/`xmpp:` URLs and email\n/// addresses.\nconst Autolink = {\n    parseInline: [{\n            name: \"Autolink\",\n            parse(cx, next, absPos) {\n                let pos = absPos - cx.offset;\n                autolinkRE.lastIndex = pos;\n                let m = autolinkRE.exec(cx.text), end = -1;\n                if (!m)\n                    return -1;\n                if (m[1] || m[2]) { // www., http://\n                    end = autolinkURLEnd(cx.text, pos + m[0].length);\n                }\n                else if (m[3]) { // email address\n                    end = autolinkEmailEnd(cx.text, pos);\n                }\n                else { // mailto:/xmpp:\n                    end = autolinkEmailEnd(cx.text, pos + m[0].length);\n                    if (end > -1 && m[0] == \"xmpp:\") {\n                        xmppResourceRE.lastIndex = end;\n                        m = xmppResourceRE.exec(cx.text);\n                        if (m)\n                            end = m.index + m[0].length;\n                    }\n                }\n                if (end < 0)\n                    return -1;\n                cx.addElement(cx.elt(\"URL\", absPos, end + cx.offset));\n                return end + cx.offset;\n            }\n        }]\n};\n/// Extension bundle containing [`Table`](#Table),\n/// [`TaskList`](#TaskList), [`Strikethrough`](#Strikethrough), and\n/// [`Autolink`](#Autolink).\nconst GFM = [Table, TaskList, Strikethrough, Autolink];\nfunction parseSubSuper(ch, node, mark) {\n    return (cx, next, pos) => {\n        if (next != ch || cx.char(pos + 1) == ch)\n            return -1;\n        let elts = [cx.elt(mark, pos, pos + 1)];\n        for (let i = pos + 1; i < cx.end; i++) {\n            let next = cx.char(i);\n            if (next == ch)\n                return cx.addElement(cx.elt(node, pos, i + 1, elts.concat(cx.elt(mark, i, i + 1))));\n            if (next == 92 /* '\\\\' */)\n                elts.push(cx.elt(\"Escape\", i, i++ + 2));\n            if (space(next))\n                break;\n        }\n        return -1;\n    };\n}\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// superscript using `^` markers.\nconst Superscript = {\n    defineNodes: [\n        { name: \"Superscript\", style: tags.special(tags.content) },\n        { name: \"SuperscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Superscript\",\n            parse: parseSubSuper(94 /* '^' */, \"Superscript\", \"SuperscriptMark\")\n        }]\n};\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// subscript using `~` markers.\nconst Subscript = {\n    defineNodes: [\n        { name: \"Subscript\", style: tags.special(tags.content) },\n        { name: \"SubscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Subscript\",\n            parse: parseSubSuper(126 /* '~' */, \"Subscript\", \"SubscriptMark\")\n        }]\n};\n/// Extension that parses two colons with only letters, underscores,\n/// and numbers between them as `Emoji` nodes.\nconst Emoji = {\n    defineNodes: [{ name: \"Emoji\", style: tags.character }],\n    parseInline: [{\n            name: \"Emoji\",\n            parse(cx, next, pos) {\n                let match;\n                if (next != 58 /* ':' */ || !(match = /^[a-zA-Z_0-9]+:/.exec(cx.slice(pos + 1, cx.end))))\n                    return -1;\n                return cx.addElement(cx.elt(\"Emoji\", pos, pos + 1 + match[0].length));\n            }\n        }]\n};\n\nexport { Autolink, BlockContext, Element, Emoji, GFM, InlineContext, LeafBlock, Line, MarkdownParser, Strikethrough, Subscript, Superscript, Table, TaskList, parseCode, parser };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}